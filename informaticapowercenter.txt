////////////////////////////////////////
///////****** informaticapowercenter ******///////
////////////////////////////////////////

////////  REACT  ////////
(Lenguajes: CSS, HTML, JSON, JavaScript, Markdown, TypeScript)

√çNDICE DE ARCHIVOS INCLUIDOS:
 - tsconfig.node.json
 - index.html
 - tsconfig.app.json
 - README.md
 - package.json
 - tsconfig.json
 - eslint.config.js
 - vite.config.ts
 - tsconfig.node.tsbuildinfo
 - public/vite.svg
 - src/App.tsx
 - src/main.tsx
 - src/vite-env.d.ts
 - src/types/extraction.ts
 - src/styles/index.css
 - src/components/ui/Card.tsx
 - src/components/ui/Loader.tsx
 - src/components/ui/SqlCodeViewer.tsx
 - src/components/ui/Button.tsx
 - src/components/layout/MainLayout.tsx
 - src/components/layout/Header.tsx
 - src/components/layout/Sidebar.tsx
 - src/components/dashboard/KPICard.tsx
 - src/components/dashboard/MappingTypeChart.tsx
 - src/components/common/DataTable.tsx
 - src/components/workflow/WorkflowGraph.tsx
 - src/components/mappings/MappingGraph.tsx
 - src/hooks/useExtractionData.ts
 - src/hooks/useEtlData.ts
 - src/lib/extractor.ts
 - src/lib/mappingHelpers.ts
 - src/assets/react.svg
 - src/pages/Sources.tsx
 - src/pages/Details.tsx
 - src/pages/Sessions.tsx
 - src/pages/Targets.tsx
 - src/pages/Workflows.tsx
 - src/pages/Dashboard.tsx
 - src/pages/Tools.tsx
 - src/pages/Mappings.tsx
 - src/pages/ExpressionValidator.tsx
 - src/pages/NotFound.tsx
 - src/services/etlService.ts
 - src/interfaces/mapping.interface.ts
 - src/interfaces/powermart.interface.ts
 - src/interfaces/workflow.interface.ts
 - src/interfaces/multi-workflow.interface.ts
 - src/interfaces/sessiones.interface.ts
 - src/interfaces/index.ts
 - src/router/index.tsx

================================================================================

// tsconfig.node.json

{
  "compilerOptions": {
    "module": "NodeNext",
    "moduleResolution": "NodeNext",
    "target": "ES2022",
    "allowImportingTsExtensions": true,
    "strict": true,
    "skipLibCheck": true,
    "allowSyntheticDefaultImports": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true
  },
  "include": ["vite.config.ts","src/lib/**/*.ts", "src/lib/mappingHelpers.js"]
}


--------------------------------------------------------------------------------

<!-- index.html -->

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


--------------------------------------------------------------------------------

// tsconfig.app.json

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}


--------------------------------------------------------------------------------

** README.md **

# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...

      // Remove tseslint.configs.recommended and replace with this
      tseslint.configs.recommendedTypeChecked,
      // Alternatively, use this for stricter rules
      tseslint.configs.strictTypeChecked,
      // Optionally, add this for stylistic rules
      tseslint.configs.stylisticTypeChecked,

      // Other configs...
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...
      // Enable lint rules for React
      reactX.configs['recommended-typescript'],
      // Enable lint rules for React DOM
      reactDom.configs.recommended,
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```


--------------------------------------------------------------------------------

// package.json

{
  "name": "informaticapowercenter",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "extract": "tsx src/lib/extractor.ts"
  },
  "dependencies": {
    "@tailwindcss/vite": "^4.1.13",
    "@tanstack/react-table": "^8.21.3",
    "@tanstack/react-virtual": "^3.13.12",
    "@types/prismjs": "^1.26.5",
    "framer-motion": "^12.23.22",
    "lucide-react": "^0.544.0",
    "prismjs": "^1.30.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-router-dom": "^6.25.1",
    "reactflow": "^11.11.4",
    "recharts": "^3.2.1",
    "sonner": "^2.0.7",
    "tailwindcss": "^4.1.13",
    "xml2js": "^0.6.2"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@types/react": "^19.1.13",
    "@types/react-dom": "^19.1.9",
    "@types/xml2js": "^0.4.14",
    "@vitejs/plugin-react": "^5.0.3",
    "eslint": "^9.36.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.4.0",
    "tsx": "^4.20.5",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.44.0",
    "vite": "^7.1.7"
  }
}


--------------------------------------------------------------------------------

// tsconfig.json

{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}


--------------------------------------------------------------------------------

// eslint.config.js

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])


--------------------------------------------------------------------------------

// vite.config.ts

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite';

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
})


--------------------------------------------------------------------------------

// tsconfig.node.tsbuildinfo

{"root":["./vite.config.ts","./src/lib/extractor.ts","./src/lib/mappinghelpers.ts"],"errors":true,"version":"5.8.3"}


--------------------------------------------------------------------------------

// public/vite.svg

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>


--------------------------------------------------------------------------------

// src/App.tsx

import { RouterProvider } from "react-router-dom";
import { router } from "./router";

function App() {
  return <RouterProvider router={router} />;
}

export default App;


--------------------------------------------------------------------------------

// src/main.tsx

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './styles/index.css' // Actualiza la ruta a los estilos
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)


--------------------------------------------------------------------------------

// src/vite-env.d.ts

/// <reference types="vite/client" />


--------------------------------------------------------------------------------

// src/types/extraction.ts

// src/types/extraction.ts
export type ExtractionSummary = {
  totalWorkflows: number;
  totalSessions: number;
  totalMappings: number;
  totalSources: number;
  totalTargets: number;
  totalTransformations: number;
};

export type MappingField = {
  name: string;
  portType?: string;
  dataType?: string;
  precision?: string;
  scale?: string;
  description?: string;
};

export type MappingTransformation = {
  name: string;
  type: string; // p.ej. "Expression", "Joiner", "Source Qualifier" ‚Ä¶
  description?: string;
  reusable?: string; // "YES" | "NO"
  fields?: MappingField[];
};

export type MappingInstance = {
  name: string;
  type: "SOURCE" | "TARGET" | "TRANSFORMATION";
  transformationName: string;
  transformationType: string; // p.ej. "Expression", "Source Definition", "Target Definition" ‚Ä¶
};

export type MappingConnector = {
  fromInstance: string;
  fromInstanceType: string;
  toInstance: string;
  toInstanceType: string;
  fromField?: string;
  toField?: string;
};

export type Mapping = {
  name: string;
  isValid?: string; // "YES" | "NO"
  description?: string;
  transformations?: MappingTransformation[];
  instances?: MappingInstance[];
  connectors?: MappingConnector[];
};

export type Extraction = {
  repositoryName?: string;
  folderName?: string;
  summary?: ExtractionSummary;
  mappings?: Mapping[];
  // workflows?: Workflow[]; // si existe, puedes tiparlo luego
};


--------------------------------------------------------------------------------

/* src/styles/index.css */

@import "tailwindcss";

/* Variables CSS personalizadas para el sistema de dise√±o */
:root {
  /* Colores principales */
  --primary-50: #eff6ff;
  --primary-100: #dbeafe;
  --primary-200: #bfdbfe;
  --primary-300: #93c5fd;
  --primary-400: #60a5fa;
  --primary-500: #3b82f6;
  --primary-600: #2563eb;
  --primary-700: #1d4ed8;
  --primary-800: #1e40af;
  --primary-900: #1e3a8a;

  /* Colores secundarios */
  --secondary-50: #f8fafc;
  --secondary-100: #f1f5f9;
  --secondary-200: #e2e8f0;
  --secondary-300: #cbd5e1;
  --secondary-400: #94a3b8;
  --secondary-500: #64748b;
  --secondary-600: #475569;
  --secondary-700: #334155;
  --secondary-800: #1e293b;
  --secondary-900: #0f172a;

  /* Colores de estado */
  --success-50: #f0fdf4;
  --success-500: #22c55e;
  --success-600: #16a34a;
  --warning-50: #fffbeb;
  --warning-500: #f59e0b;
  --warning-600: #d97706;
  --error-50: #fef2f2;
  --error-500: #ef4444;
  --error-600: #dc2626;

  /* Sombras mejoradas */
  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
  --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);

  /* Bordes redondeados */
  --radius-sm: 0.375rem;
  --radius-md: 0.5rem;
  --radius-lg: 0.75rem;
  --radius-xl: 1rem;

  /* Espaciado */
  --spacing-xs: 0.25rem;
  --spacing-sm: 0.5rem;
  --spacing-md: 1rem;
  --spacing-lg: 1.5rem;
  --spacing-xl: 2rem;
  --spacing-2xl: 3rem;
}

/* Reset y estilos base mejorados */
* {
  box-sizing: border-box;
}

html {
  scroll-behavior: smooth;
}

body {
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;
  font-feature-settings: 'cv02', 'cv03', 'cv04', 'cv11';
  background-color: var(--secondary-50);
  color: var(--secondary-800);
  line-height: 1.6;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Mejoras de accesibilidad */
:focus-visible {
  outline: 2px solid var(--primary-500);
  outline-offset: 2px;
}

/* Animaciones suaves globales */
* {
  transition: color 0.2s ease, background-color 0.2s ease, border-color 0.2s ease, 
              box-shadow 0.2s ease, transform 0.2s ease, opacity 0.2s ease;
}

/* Scrollbar personalizada */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: var(--secondary-100);
  border-radius: var(--radius-md);
}

::-webkit-scrollbar-thumb {
  background: var(--secondary-300);
  border-radius: var(--radius-md);
}

::-webkit-scrollbar-thumb:hover {
  background: var(--secondary-400);
}

/* Clases utilitarias personalizadas */
.glass-effect {
  background: rgba(255, 255, 255, 0.9);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.gradient-primary {
  background: linear-gradient(135deg, var(--primary-600) 0%, var(--primary-700) 100%);
}

.gradient-secondary {
  background: linear-gradient(135deg, var(--secondary-700) 0%, var(--secondary-800) 100%);
}

.text-gradient {
  background: linear-gradient(135deg, var(--primary-600), var(--primary-800));
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

/* Animaciones personalizadas */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes slideIn {
  from { opacity: 0; transform: translateX(-20px); }
  to { opacity: 1; transform: translateX(0); }
}

@keyframes slideInRight {
  from { opacity: 0; transform: translateX(20px); }
  to { opacity: 1; transform: translateX(0); }
}

@keyframes slideUp {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes scaleIn {
  from { opacity: 0; transform: scale(0.95); }
  to { opacity: 1; transform: scale(1); }
}

@keyframes bounce {
  0%, 20%, 53%, 80%, 100% { transform: translate3d(0,0,0); }
  40%, 43% { transform: translate3d(0, -8px, 0); }
  70% { transform: translate3d(0, -4px, 0); }
  90% { transform: translate3d(0, -2px, 0); }
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.8; }
}

@keyframes shimmer {
  0% { transform: translateX(-100%); }
  100% { transform: translateX(100%); }
}

@keyframes float {
  0%, 100% { transform: translateY(0px); }
  50% { transform: translateY(-6px); }
}

@keyframes glow {
  0%, 100% { box-shadow: 0 0 5px rgba(59, 130, 246, 0.5); }
  50% { box-shadow: 0 0 20px rgba(59, 130, 246, 0.8), 0 0 30px rgba(59, 130, 246, 0.6); }
}

/* Clases de animaci√≥n */
.animate-fade-in {
  animation: fadeIn 0.4s ease-out;
}

.animate-slide-in {
  animation: slideIn 0.4s ease-out;
}

.animate-slide-in-right {
  animation: slideInRight 0.4s ease-out;
}

.animate-slide-up {
  animation: slideUp 0.4s ease-out;
}

.animate-scale-in {
  animation: scaleIn 0.3s ease-out;
}

.animate-bounce {
  animation: bounce 1s ease-in-out;
}

.animate-pulse-subtle {
  animation: pulse 2s infinite;
}

.animate-float {
  animation: float 3s ease-in-out infinite;
}

.animate-glow {
  animation: glow 2s ease-in-out infinite;
}

/* Animaciones con delay para efectos escalonados */
.animate-delay-100 { animation-delay: 0.1s; }
.animate-delay-200 { animation-delay: 0.2s; }
.animate-delay-300 { animation-delay: 0.3s; }
.animate-delay-500 { animation-delay: 0.5s; }

/* Mejoras para elementos interactivos */
.interactive-element {
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
}

.interactive-element:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-xl);
}

.interactive-element:active {
  transform: translateY(0);
  transition: all 0.1s ease;
}

/* Efecto de ondas para botones */
.ripple-effect {
  position: relative;
  overflow: hidden;
}

.ripple-effect::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 0;
  height: 0;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.3);
  transform: translate(-50%, -50%);
  transition: width 0.6s, height 0.6s;
}

.ripple-effect:active::before {
  width: 300px;
  height: 300px;
}

/* Efectos hover mejorados para cards */
.card-hover {
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  border: 1px solid transparent;
}

.card-hover:hover {
  transform: translateY(-4px) scale(1.02);
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  border-color: var(--primary-200);
}

/* Efectos para botones */
.btn-primary {
  background: linear-gradient(135deg, var(--primary-600), var(--primary-700));
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
}

.btn-primary::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s;
}

.btn-primary:hover::before {
  left: 100%;
}

.btn-primary:hover {
  transform: translateY(-1px);
  box-shadow: 0 10px 20px rgba(59, 130, 246, 0.4);
}

/* Efectos para iconos */
.icon-bounce:hover {
  animation: bounce 0.6s ease-in-out;
}

.icon-rotate:hover {
  transform: rotate(360deg);
  transition: transform 0.6s ease-in-out;
}

.icon-pulse:hover {
  animation: pulse 1s ease-in-out;
}

/* Efectos de entrada para listas */
.stagger-children > * {
  opacity: 0;
  transform: translateY(20px);
  animation: fadeIn 0.5s ease-out forwards;
}

.stagger-children > *:nth-child(1) { animation-delay: 0.1s; }
.stagger-children > *:nth-child(2) { animation-delay: 0.2s; }
.stagger-children > *:nth-child(3) { animation-delay: 0.3s; }
.stagger-children > *:nth-child(4) { animation-delay: 0.4s; }
.stagger-children > *:nth-child(5) { animation-delay: 0.5s; }
.stagger-children > *:nth-child(6) { animation-delay: 0.6s; }

/* Efectos de focus mejorados */
.focus-ring:focus {
  outline: none;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);
  border-color: var(--primary-500);
}

/* Transiciones suaves para cambios de estado */
.smooth-transition {
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

/* Efectos de loading mejorados */
.loading-dots::after {
  content: '';
  animation: loading-dots 1.5s infinite;
}

@keyframes loading-dots {
  0%, 20% { content: '.'; }
  40% { content: '..'; }
  60%, 100% { content: '...'; }
}

/* Estilos para estados de carga */
.loading-skeleton {
  background: linear-gradient(90deg, var(--secondary-200) 25%, var(--secondary-100) 50%, var(--secondary-200) 75%);
  background-size: 200% 100%;
  animation: loading 1.5s infinite;
}

@keyframes loading {
  0% { background-position: 200% 0; }
  100% { background-position: -200% 0; }
}


--------------------------------------------------------------------------------

// src/components/ui/Card.tsx

import type { ReactNode } from "react";
import { Link } from "react-router-dom";

interface CardProps {
  title: string;
  titleClassName?: string;
  children: ReactNode;
  to?: string;
  onClick?: () => void;
  variant?: "default" | "gradient" | "glass" | "minimal";
  size?: "sm" | "md" | "lg";
  icon?: ReactNode;
  badge?: string | number;
  status?: "success" | "warning" | "error" | "info";
}

export const Card = ({
  title,
  titleClassName,
  children,
  to,
  onClick,
  variant = "default",
  size = "md",
  icon,
  badge,
  status,
}: CardProps) => {
  // Clases base seg√∫n variante
  const variantClasses = {
    default: "bg-white border border-slate-200/60 shadow-md hover:shadow-xl",
    gradient: "bg-gradient-to-br from-white to-slate-50 border border-slate-200/60 shadow-lg hover:shadow-xl",
    glass: "glass-effect border border-white/30 shadow-lg hover:shadow-xl",
    minimal: "bg-white/80 border border-slate-100 shadow-sm hover:shadow-md",
  };

  // Clases de tama√±o
  const sizeClasses = {
    sm: "p-4",
    md: "p-6",
    lg: "p-8",
  };

  // Clases de t√≠tulo seg√∫n variante
  const getTitleClasses = () => {
    if (titleClassName) return titleClassName;
    
    switch (variant) {
      case "gradient":
        return "text-gradient";
      case "glass":
        return "text-slate-800 font-semibold";
      case "minimal":
        return "text-slate-700 font-medium";
      default:
        return "text-slate-800 font-semibold";
    }
  };

  // Indicador de estado
  const statusColors = {
    success: "bg-green-500",
    warning: "bg-yellow-500",
    error: "bg-red-500",
    info: "bg-blue-500",
  };

  const cardContent = (
    <div className="relative">
      {/* Indicador de estado */}
      {status && (
        <div className={`absolute -top-2 -right-2 w-3 h-3 ${statusColors[status]} rounded-full border-2 border-white shadow-sm`}></div>
      )}

      {/* Header con icono y badge */}
      <div className="flex items-start justify-between mb-3">
        <div className="flex items-center space-x-3 flex-1 min-w-0">
          {icon && (
            <div className="flex-shrink-0 w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center text-white shadow-md">
              {icon}
            </div>
          )}
          <h3 className={`text-lg ${getTitleClasses()} truncate flex-1`}>
            {title}
          </h3>
        </div>
        
        {badge && (
          <span className="flex-shrink-0 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 ml-2">
            {badge}
          </span>
        )}
      </div>

      {/* Contenido */}
      <div className="text-slate-600 space-y-2 leading-relaxed">
        {children}
      </div>

      {/* Efecto decorativo para variante gradient */}
      {variant === "gradient" && (
        <div className="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-blue-500/10 to-purple-500/10 rounded-full -translate-y-10 translate-x-10 pointer-events-none"></div>
      )}
    </div>
  );

  // Clases comunes para interactividad
  const interactiveClasses = "group relative overflow-hidden rounded-xl transition-all duration-300 hover:-translate-y-1 active:translate-y-0 cursor-pointer";
  const baseClasses = `${variantClasses[variant]} ${sizeClasses[size]} ${interactiveClasses}`;

  if (to) {
    return (
      <Link to={to} className={`block ${baseClasses}`}>
        {cardContent}
        {/* Efecto hover */}
        <div className="absolute inset-0 bg-gradient-to-r from-blue-500/5 to-purple-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
      </Link>
    );
  }

  if (onClick) {
    return (
      <button onClick={onClick} className={`w-full text-left ${baseClasses}`}>
        {cardContent}
        {/* Efecto hover */}
        <div className="absolute inset-0 bg-gradient-to-r from-blue-500/5 to-purple-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
      </button>
    );
  }

  return (
    <div className={`${variantClasses[variant]} ${sizeClasses[size]} rounded-xl transition-all duration-300 hover:shadow-lg`}>
      {cardContent}
    </div>
  );
};


--------------------------------------------------------------------------------

// src/components/ui/Loader.tsx

interface LoaderProps {
  size?: "sm" | "md" | "lg";
  text?: string;
  fullScreen?: boolean;
}

export const Loader = ({ 
  size = "md", 
  text = "Cargando datos...", 
  fullScreen = true 
}: LoaderProps) => {
  const sizeClasses = {
    sm: "w-6 h-6",
    md: "w-10 h-10", 
    lg: "w-16 h-16"
  };

  const textSizeClasses = {
    sm: "text-sm",
    md: "text-lg",
    lg: "text-xl"
  };

  const containerClasses = fullScreen 
    ? "flex justify-center items-center h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50"
    : "flex justify-center items-center p-8";

  return (
    <div className={containerClasses}>
      <div className="flex flex-col items-center space-y-6">
        {/* Spinner animado */}
        <div className="relative">
          {/* C√≠rculo exterior */}
          <div className={`${sizeClasses[size]} border-4 border-slate-200 rounded-full animate-spin`}>
            <div className="absolute inset-0 border-4 border-transparent border-t-blue-600 border-r-blue-600 rounded-full animate-spin"></div>
          </div>
          
          {/* C√≠rculo interior */}
          <div className={`absolute inset-2 border-2 border-slate-100 rounded-full`}>
            <div className="absolute inset-0 border-2 border-transparent border-b-purple-500 border-l-purple-500 rounded-full animate-spin" style={{ animationDirection: 'reverse', animationDuration: '1s' }}></div>
          </div>

          {/* Punto central */}
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="w-2 h-2 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full animate-pulse-subtle"></div>
          </div>
        </div>

        {/* Texto de carga */}
        <div className="text-center space-y-2">
          <p className={`${textSizeClasses[size]} font-semibold text-slate-700`}>
            {text}
          </p>
          <div className="flex space-x-1 justify-center">
            <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
            <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
            <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
          </div>
        </div>

        {/* Barra de progreso decorativa */}
        <div className="w-48 h-1 bg-slate-200 rounded-full overflow-hidden">
          <div className="h-full bg-gradient-to-r from-blue-500 to-purple-600 rounded-full animate-pulse" 
               style={{ 
                 animation: 'loading-bar 2s ease-in-out infinite',
                 width: '40%'
               }}>
          </div>
        </div>
      </div>
    </div>
  );
};


--------------------------------------------------------------------------------

// src/components/ui/SqlCodeViewer.tsx

import Prism from "prismjs";
import "prismjs/components/prism-sql";
import "prismjs/themes/prism.css";
import { useEffect, useState } from "react";

interface SqlCodeViewerProps {
  sql: string;
  title: string;
  type: "pre" | "post";
  maxHeight?: string;
}

export const SqlCodeViewer = ({
  sql,
  title,
  maxHeight = "400px",
}: SqlCodeViewerProps) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [highlightedCode, setHighlightedCode] = useState("");

  useEffect(() => {
    if (sql && sql.trim()) {
      const highlighted = Prism.highlight(sql, Prism.languages.sql, "sql");
      setHighlightedCode(highlighted);
    }
  }, [sql]);

  const shouldCollapse = sql.split("\n").length > 15;

  return (
    <div className="bg-white border border-gray-200 rounded-lg shadow-sm">
      <div className="p-2 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <h4 className="text-lg font-semibold">{title}</h4>
          {shouldCollapse && (
            <button
              onClick={() => setIsExpanded(!isExpanded)}
              className="px-3 py-1 text-xs bg-blue-100 text-blue-700 rounded hover:bg-blue-200 transition-colors"
            >
              {isExpanded ? "Collapse" : "Expand"} ({sql.split("\n").length}{" "}
              lines)
            </button>
          )}
        </div>
      </div>
      <div className=" rounded-lg overflow-hidden">
        <div
          className="overflow-x-auto"
          style={{ maxHeight: isExpanded ? "none" : maxHeight }}
        >
          <pre className="p-4 text-xs">
            <code
              className="language-sql"
              dangerouslySetInnerHTML={{ __html: highlightedCode }}
            />
          </pre>
        </div>
      </div>
    </div>
  );
};


--------------------------------------------------------------------------------

// src/components/ui/Button.tsx

import React from 'react';
import { Link } from 'react-router-dom';

interface ButtonProps {
  children: React.ReactNode;
  variant?: 'primary' | 'secondary' | 'success' | 'warning' | 'error' | 'ghost' | 'outline';
  size?: 'sm' | 'md' | 'lg';
  disabled?: boolean;
  loading?: boolean;
  icon?: React.ReactNode;
  iconPosition?: 'left' | 'right';
  fullWidth?: boolean;
  to?: string;
  href?: string;
  target?: string;
  onClick?: () => void;
  type?: 'button' | 'submit' | 'reset';
  className?: string;
}

export const Button: React.FC<ButtonProps> = ({
  children,
  variant = 'primary',
  size = 'md',
  disabled = false,
  loading = false,
  icon,
  iconPosition = 'left',
  fullWidth = false,
  to,
  href,
  target,
  onClick,
  type = 'button',
  className = '',
}) => {
  const baseClasses = `
    inline-flex items-center justify-center font-medium rounded-xl
    transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2
    disabled:opacity-50 disabled:cursor-not-allowed disabled:pointer-events-none
    ${fullWidth ? 'w-full' : ''}
  `;

  const sizeClasses = {
    sm: 'px-3 py-1.5 text-sm gap-1.5',
    md: 'px-4 py-2.5 text-sm gap-2',
    lg: 'px-6 py-3 text-base gap-2.5',
  };

  const variantClasses = {
    primary: `
      bg-gradient-to-r from-blue-600 to-blue-700 text-white shadow-lg shadow-blue-500/25
      hover:from-blue-700 hover:to-blue-800 hover:shadow-xl hover:shadow-blue-500/30
      focus:ring-blue-500 active:scale-95
    `,
    secondary: `
      bg-gradient-to-r from-slate-600 to-slate-700 text-white shadow-lg shadow-slate-500/25
      hover:from-slate-700 hover:to-slate-800 hover:shadow-xl hover:shadow-slate-500/30
      focus:ring-slate-500 active:scale-95
    `,
    success: `
      bg-gradient-to-r from-green-600 to-green-700 text-white shadow-lg shadow-green-500/25
      hover:from-green-700 hover:to-green-800 hover:shadow-xl hover:shadow-green-500/30
      focus:ring-green-500 active:scale-95
    `,
    warning: `
      bg-gradient-to-r from-orange-600 to-orange-700 text-white shadow-lg shadow-orange-500/25
      hover:from-orange-700 hover:to-orange-800 hover:shadow-xl hover:shadow-orange-500/30
      focus:ring-orange-500 active:scale-95
    `,
    error: `
      bg-gradient-to-r from-red-600 to-red-700 text-white shadow-lg shadow-red-500/25
      hover:from-red-700 hover:to-red-800 hover:shadow-xl hover:shadow-red-500/30
      focus:ring-red-500 active:scale-95
    `,
    ghost: `
      text-slate-700 hover:bg-slate-100 hover:text-slate-900
      focus:ring-slate-500 active:scale-95
    `,
    outline: `
      border-2 border-slate-300 text-slate-700 bg-white
      hover:border-slate-400 hover:bg-slate-50 hover:text-slate-900
      focus:ring-slate-500 active:scale-95
    `,
  };

  const classes = `
    ${baseClasses}
    ${sizeClasses[size]}
    ${variantClasses[variant]}
    ${className}
  `.trim();

  const LoadingSpinner = () => (
    <svg className="animate-spin h-4 w-4" fill="none" viewBox="0 0 24 24">
      <circle
        className="opacity-25"
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        strokeWidth="4"
      />
      <path
        className="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      />
    </svg>
  );

  const content = (
    <>
      {loading && <LoadingSpinner />}
      {!loading && icon && iconPosition === 'left' && icon}
      <span>{children}</span>
      {!loading && icon && iconPosition === 'right' && icon}
    </>
  );

  if (to) {
    return (
      <Link to={to} className={classes}>
        {content}
      </Link>
    );
  }

  if (href) {
    return (
      <a href={href} target={target} className={classes}>
        {content}
      </a>
    );
  }

  return (
    <button
      type={type}
      onClick={onClick}
      disabled={disabled || loading}
      className={classes}
    >
      {content}
    </button>
  );
};


--------------------------------------------------------------------------------

// src/components/layout/MainLayout.tsx

import { useState } from "react";
import { Outlet, useOutletContext } from "react-router-dom";
import { useEtlData } from "../../hooks/useEtlData";
import { Loader } from "../ui/Loader";
import { Header } from "./Header";
import { Sidebar } from "./Sidebar";

// Contexto para pasar datos y estado a las p√°ginas anidadas
type AppContextType = {
  data: ReturnType<typeof useEtlData>["data"];
  searchTerm: string;
};

export const MainLayout = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const { data, loading, error } = useEtlData();

  if (loading) return <Loader />;
  if (error) return <div className="p-6">Error: {error}</div>;
  if (!data) return <div className="p-6">No se encontraron datos.</div>;

  return (
    <div className="flex h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50">
      <Sidebar />
      <div className="flex-1 flex flex-col min-w-0">
        <Header searchTerm={searchTerm} setSearchTerm={setSearchTerm} />
        <main className="flex-1 overflow-y-auto p-6 animate-fade-in">
          <div className="mx-auto">
            <Outlet context={{ data, searchTerm } satisfies AppContextType} />
          </div>
        </main>
      </div>
    </div>
  );
};

// Hook para acceder f√°cilmente al contexto en las p√°ginas
export function useAppData() {
  return useOutletContext<AppContextType>();
}


--------------------------------------------------------------------------------

// src/components/layout/Header.tsx

import type { Dispatch, SetStateAction } from "react";

interface HeaderProps {
  searchTerm: string;
  setSearchTerm: Dispatch<SetStateAction<string>>;
}

export const Header = ({ searchTerm, setSearchTerm }: HeaderProps) => (
  <header className="glass-effect border-b border-white/20 backdrop-blur-xl">
    <div className="px-6 py-4">
      <div className="flex items-center justify-between">
        {/* T√≠tulo y breadcrumb */}
        <div className="flex items-center space-x-4">
          <div>
            <h1 className="text-2xl font-bold text-gradient">Dashboard ETL</h1>
            <p className="text-sm text-slate-600 mt-1">
              An√°lisis y monitoreo de procesos ETL
            </p>
          </div>
        </div>

        {/* Barra de b√∫squeda y acciones */}
        <div className="flex items-center space-x-6">
          {/* Barra de b√∫squeda mejorada */}
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg className="h-5 w-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            <input
              type="text"
              placeholder="Buscar mappings, workflows..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-80 pl-10 pr-4 py-2.5 bg-white/70 border border-slate-200/50 rounded-xl 
                         focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50
                         placeholder-slate-400 text-slate-700 backdrop-blur-sm
                         transition-all duration-200 hover:bg-white/80"
            />
            {searchTerm && (
              <button
                onClick={() => setSearchTerm("")}
                className="absolute inset-y-0 right-0 pr-3 flex items-center text-slate-400 hover:text-slate-600"
              >
                <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            )}
          </div>

          {/* Notificaciones */}
          <button className="relative p-2 text-slate-600 hover:text-slate-800 hover:bg-white/50 rounded-lg transition-all duration-200">
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 17h5l-5 5v-5zM10.07 2.82l3.12 3.12M7.05 5.84l3.12 3.12M4.03 8.86l3.12 3.12M1.01 11.88l3.12 3.12" />
            </svg>
            <div className="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full border-2 border-white"></div>
          </button>

          {/* Configuraci√≥n */}
          <button className="p-2 text-slate-600 hover:text-slate-800 hover:bg-white/50 rounded-lg transition-all duration-200">
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
          </button>

          {/* Perfil de usuario mejorado */}
          <div className="flex items-center space-x-3 pl-4 border-l border-slate-200/50">
            <div className="text-right">
              <p className="text-sm font-medium text-slate-700">Admin Usuario</p>
              <p className="text-xs text-slate-500">Administrador</p>
            </div>
            <div className="relative">
              <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center shadow-lg ring-2 ring-white/50">
                <span className="text-white font-semibold text-sm">AU</span>
              </div>
              <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-400 rounded-full border-2 border-white shadow-sm"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </header>
);


--------------------------------------------------------------------------------

// src/components/layout/Sidebar.tsx

import { NavLink } from "react-router-dom";

// Iconos SVG modernos
const DashboardIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z" />
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 5a2 2 0 012-2h4a2 2 0 012 2v6H8V5z" />
  </svg>
);

const MappingsIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
  </svg>
);

const WorkflowsIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
  </svg>
);

const SessionsIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
  </svg>
);

const SourcesIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
  </svg>
);

const TargetsIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
  </svg>
);

const ToolsIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
  </svg>
);

const sections = [
  { path: "/", name: "Dashboard", icon: DashboardIcon },
  { path: "/mappings", name: "Mappings", icon: MappingsIcon },
  { path: "/workflows", name: "Workflows", icon: WorkflowsIcon },
  { path: "/sessions", name: "Sessions", icon: SessionsIcon },
  { path: "/sources", name: "Sources", icon: SourcesIcon },
  { path: "/targets", name: "Targets", icon: TargetsIcon },
  { path: "/tools", name: "Herramientas", icon: ToolsIcon },
];

export const Sidebar = () => (
  <aside className="w-64 gradient-secondary text-white shadow-xl relative overflow-hidden">
    {/* Efecto de fondo decorativo */}
    <div className="absolute inset-0 bg-gradient-to-br from-blue-600/10 to-purple-600/10"></div>
    <div className="absolute top-0 right-0 w-32 h-32 bg-white/5 rounded-full -translate-y-16 translate-x-16"></div>
    <div className="absolute bottom-0 left-0 w-24 h-24 bg-white/5 rounded-full translate-y-12 -translate-x-12"></div>
    
    <div className="relative z-10">
      {/* Header del sidebar */}
      <div className="p-6 border-b border-white/10">
        <div className="flex items-center space-x-3">
          <div className="w-10 h-10 bg-gradient-to-br from-blue-400 to-blue-600 rounded-lg flex items-center justify-center shadow-lg">
            <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
            </svg>
          </div>
          <div>
            <h1 className="text-lg font-bold text-white">PowerCenter</h1>
            <p className="text-xs text-blue-200">ETL Analytics</p>
          </div>
        </div>
      </div>

      {/* Navegaci√≥n */}
      <nav className="mt-6 px-3">
        <div className="space-y-1">
          {sections.map((section) => (
            <NavLink
              key={section.name}
              to={section.path}
              className={({ isActive }) =>
                `group flex items-center px-3 py-3 text-sm font-medium rounded-lg transition-all duration-200 relative overflow-hidden ${
                  isActive 
                    ? "bg-white/15 text-white shadow-lg backdrop-blur-sm border border-white/20" 
                    : "text-blue-100 hover:bg-white/10 hover:text-white"
                }`
              }
            >
              {({ isActive }) => (
                <>
                  {/* Indicador activo */}
                  {isActive && (
                    <div className="absolute left-0 top-0 bottom-0 w-1 bg-gradient-to-b from-blue-400 to-blue-300 rounded-r-full"></div>
                  )}
                  
                  {/* Icono */}
                  <div className={`flex-shrink-0 mr-3 transition-transform duration-200 ${
                    isActive ? "scale-110" : "group-hover:scale-105"
                  }`}>
                    <section.icon />
                  </div>
                  
                  {/* Texto */}
                  <span className="flex-1">{section.name}</span>
                  
                  {/* Efecto hover */}
                  <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 -skew-x-12 transform translate-x-full group-hover:translate-x-0"></div>
                </>
              )}
            </NavLink>
          ))}
        </div>
      </nav>

      {/* Footer del sidebar */}
    </div>
      <div className="absolute bottom-0 left-0 right-0 p-4 border-t border-white/10">
        <div className="flex items-center space-x-3 text-blue-200 text-xs">
          <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse-subtle"></div>
          <span>Sistema activo</span>
        </div>
      </div>
  </aside>
);


--------------------------------------------------------------------------------

// src/components/dashboard/KPICard.tsx

import { type ReactNode } from "react";

interface KPICardProps {
  title: string;
  value: number | string;
  description?: string;
  icon?: ReactNode;
  trend?: {
    value: number;
    isPositive: boolean;
  };
  color?: "blue" | "green" | "purple" | "orange" | "red";
}

export function KPICard({
  title,
  value,
  description,
  icon,
  trend,
  color = "blue",
}: KPICardProps) {
  const colorClasses = {
    blue: {
      bg: "from-blue-500 to-blue-600",
      text: "text-blue-600",
      light: "bg-blue-50",
      border: "border-blue-200",
    },
    green: {
      bg: "from-green-500 to-green-600",
      text: "text-green-600",
      light: "bg-green-50",
      border: "border-green-200",
    },
    purple: {
      bg: "from-purple-500 to-purple-600",
      text: "text-purple-600",
      light: "bg-purple-50",
      border: "border-purple-200",
    },
    orange: {
      bg: "from-orange-500 to-orange-600",
      text: "text-orange-600",
      light: "bg-orange-50",
      border: "border-orange-200",
    },
    red: {
      bg: "from-red-500 to-red-600",
      text: "text-red-600",
      light: "bg-red-50",
      border: "border-red-200",
    },
  };

  const currentColor = colorClasses[color];

  return (
    <div className="group relative overflow-hidden rounded-2xl bg-white border border-slate-200/60 p-6 shadow-md hover:shadow-xl transition-all duration-300 hover:-translate-y-1 animate-scale-in">
      {/* Fondo decorativo */}
      <div className={`absolute top-0 right-0 w-20 h-20 bg-gradient-to-br ${currentColor.bg} opacity-10 rounded-full -translate-y-10 translate-x-10 group-hover:scale-110 transition-transform duration-300 animate-float`}></div>
      
      {/* Contenido principal */}
      <div className="relative z-10">
        {/* Header con icono y t√≠tulo */}
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center space-x-3">
            {icon && (
              <div className={`w-10 h-10 bg-gradient-to-br ${currentColor.bg} rounded-lg flex items-center justify-center text-white shadow-md group-hover:scale-105 transition-transform duration-200 icon-bounce`}>
                {icon}
              </div>
            )}
            <div className="text-sm font-medium text-slate-600 uppercase tracking-wide">
              {title}
            </div>
          </div>
          
          {/* Indicador de tendencia */}
          {trend && (
            <div className={`flex items-center space-x-1 px-2 py-1 rounded-full text-xs font-medium animate-pulse ${
              trend.isPositive 
                ? "bg-green-100 text-green-700" 
                : "bg-red-100 text-red-700"
            }`}>
              <svg 
                className={`w-3 h-3 ${trend.isPositive ? "rotate-0" : "rotate-180"} transition-transform duration-300`} 
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 17l9.2-9.2M17 17V7H7" />
              </svg>
              <span>{Math.abs(trend.value)}%</span>
            </div>
          )}
        </div>

        {/* Valor principal */}
        <div className="mb-2">
          <div className={`text-3xl font-bold ${currentColor.text} group-hover:scale-105 transition-transform duration-200 inline-block animate-glow`}>
            {typeof value === 'number' ? value.toLocaleString() : value}
          </div>
        </div>

        {/* Descripci√≥n */}
        {description && (
          <div className="text-sm text-slate-500 leading-relaxed">
            {description}
          </div>
        )}

        {/* Barra de progreso decorativa */}
        <div className="mt-4 h-1 bg-slate-100 rounded-full overflow-hidden">
          <div 
            className={`h-full bg-gradient-to-r ${currentColor.bg} rounded-full transition-all duration-1000 group-hover:w-full animate-shimmer`}
            style={{ width: '60%' }}
          ></div>
        </div>
      </div>

      {/* Efecto hover */}
      <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 -skew-x-12 transform translate-x-full group-hover:translate-x-0"></div>
    </div>
  );
}


--------------------------------------------------------------------------------

// src/components/dashboard/MappingTypeChart.tsx

import {
  Bar,
  BarChart,
  CartesianGrid,
  ResponsiveContainer,
  Tooltip,
  XAxis,
  YAxis,
} from "recharts";

type Mapping = {
  name: string;
  transformations?: { type: string }[];
};

export default function MappingTypeChart({
  mappings,
}: {
  mappings: Mapping[];
}) {
  const counts: Record<string, number> = {};
  mappings?.forEach((m) =>
    m.transformations?.forEach((t) => {
      counts[t.type] = (counts[t.type] ?? 0) + 1;
    })
  );
  const data = Object.entries(counts).map(([type, count]) => ({ type, count }));

  return (
    <div className="h-72 rounded-2xl border bg-white p-4 shadow-sm">
      <ResponsiveContainer width="100%" height="100%">
        <BarChart data={data}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="type" />
          <YAxis allowDecimals={false} />
          <Tooltip />
          <Bar dataKey="count" />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
}


--------------------------------------------------------------------------------

// src/components/common/DataTable.tsx

import {
  type ColumnDef,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table";
import { useVirtualizer } from "@tanstack/react-virtual";
import React from "react";

/**
 * DataTable gen√©rica con soporte opcional de virtualizaci√≥n.
 * - data: filas
 * - columns: ColumnDef<T>[]
 * - height: alto del contenedor para virtualizaci√≥n (px)
 * - virtualized: activar/desactivar virtualizaci√≥n
 */
export function DataTable<T>({
  data,
  columns,
  virtualized = false,
  height = 520,
}: {
  data: T[];
  columns: ColumnDef<T, any>[];
  virtualized?: boolean;
  height?: number;
}) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    state: {},
  });

  const rows = table.getRowModel().rows;

  // Virtualizaci√≥n de filas (opcional)
  const parentRef = React.useRef<HTMLDivElement>(null);
  const rowVirtualizer = useVirtualizer({
    count: rows.length,
    getScrollElement: () => parentRef.current,
    estimateSize: () => 40,
    overscan: 8,
  });

  const items = virtualized
    ? rowVirtualizer.getVirtualItems()
    : rows.map((_, i) => ({ index: i } as any));

  return (
    <div className="rounded-xl border bg-white shadow-sm">
      <div className="overflow-x-auto">
        <table className="min-w-full text-sm">
          <thead className="sticky top-0 z-10 bg-gray-50">
            {table.getHeaderGroups().map((hg) => (
              <tr key={hg.id}>
                {hg.headers.map((h) => (
                  <th
                    key={h.id}
                    className="px-3 py-2 text-left font-semibold text-gray-700"
                  >
                    {h.isPlaceholder
                      ? null
                      : flexRender(h.column.columnDef.header, h.getContext())}
                  </th>
                ))}
              </tr>
            ))}
          </thead>
        </table>
      </div>

      <div
        ref={parentRef}
        className="overflow-auto"
        style={{ height: virtualized ? height : "auto" }}
      >
        <table className="min-w-full text-sm">
          <tbody
            style={
              virtualized
                ? { height: rowVirtualizer.getTotalSize() }
                : undefined
            }
          >
            {items.map((vi: any) => {
              const row = rows[virtualized ? vi.index : vi.index];
              const style = virtualized
                ? ({
                    transform: `translateY(${vi.start}px)`,
                  } as React.CSSProperties)
                : undefined;
              return (
                <tr
                  key={row.id}
                  style={style}
                  className="border-t hover:bg-gray-50"
                >
                  {row.getVisibleCells().map((cell) => (
                    <td key={cell.id} className="px-3 py-2 align-top">
                      {flexRender(
                        cell.column.columnDef.cell,
                        cell.getContext()
                      )}
                    </td>
                  ))}
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    </div>
  );
}


--------------------------------------------------------------------------------

// src/components/workflow/WorkflowGraph.tsx

import { useMemo } from "react";
import ReactFlow, { Background, Controls } from "reactflow";
import "reactflow/dist/style.css";

type WorkflowTask = {
  name: string;
  taskType?: string;
};

type WorkflowLink = {
  fromTask: string;
  toTask: string;
  condition?: string;
};

type Workflow = {
  name: string;
  tasks: WorkflowTask[];
  links: WorkflowLink[];
};

export default function WorkflowGraph({ wf }: { wf: Workflow }) {
  const { nodes, edges } = useMemo(() => {
    const nodes = wf.tasks.map((t, i) => ({
      id: t.name,
      data: { label: `${t.taskType ?? "Task"}: ${t.name}` },
      position: { x: (i % 6) * 220, y: Math.floor(i / 6) * 120 },
      style: {
        borderRadius: 12,
        padding: 8,
        background: "#fff",
        border: "1px solid #e5e7eb",
      },
    }));
    const edges = wf.links.map((l) => ({
      id: `${l.fromTask}->${l.toTask}`,
      source: l.fromTask,
      target: l.toTask,
      label: l.condition,
      animated: true,
    }));
    return { nodes, edges };
  }, [wf]);

  return (
    <div className="h-[70vh] rounded-2xl border bg-white shadow-sm">
      <ReactFlow nodes={nodes} edges={edges} fitView>
        <Background />
        <Controls />
      </ReactFlow>
    </div>
  );
}


--------------------------------------------------------------------------------

// src/components/mappings/MappingGraph.tsx

// src/components/mappings/MappingGraph.tsx
import { useMemo } from "react";
import ReactFlow, { Background, Controls } from "reactflow";
import "reactflow/dist/style.css";
import type { Mapping } from "../../types/extraction";

export default function MappingGraph({ mapping }: { mapping: Mapping }) {
  const { nodes, edges } = useMemo(() => {
    const nodes = (mapping.instances ?? []).map((inst, i) => ({
      id: inst.name,
      data: { label: `${inst.transformationType}: ${inst.name}` },
      position: { x: (i % 6) * 240, y: Math.floor(i / 6) * 120 },
      style: {
        borderRadius: 12,
        padding: 8,
        background: "#fff",
        border: "1px solid #e5e7eb",
      },
    }));

    const edges = (mapping.connectors ?? []).map((c, idx) => ({
      id: `${c.fromInstance}->${c.toInstance}-${idx}`,
      source: c.fromInstance,
      target: c.toInstance,
      label:
        c.fromField && c.toField ? `${c.fromField} ‚Üí ${c.toField}` : undefined,
      animated: true,
    }));

    return { nodes, edges };
  }, [mapping]);

  return (
    <div className="h-[70vh] rounded-2xl border bg-white shadow-sm">
      <ReactFlow nodes={nodes} edges={edges} fitView>
        <Background />
        <Controls />
      </ReactFlow>
    </div>
  );
}


--------------------------------------------------------------------------------

// src/hooks/useExtractionData.ts

// src/hooks/useExtractionData.ts
import React from "react";
import type { Extraction } from "../types/extraction";

export function useExtractionData(path = "/extraction.json") {
  const [data, setData] = React.useState<Extraction | null>(null);
  const [loading, setLoading] = React.useState(true);
  const [error, setError] = React.useState<string | null>(null);

  React.useEffect(() => {
    let alive = true;
    setLoading(true);
    fetch(path)
      .then((r) => {
        if (!r.ok) throw new Error(`HTTP ${r.status}`);
        return r.json();
      })
      .then((json) => {
        if (alive) setData(json);
      })
      .catch((e) => {
        if (alive) setError(String(e));
      })
      .finally(() => {
        if (alive) setLoading(false);
      });
    return () => {
      alive = false;
    };
  }, [path]);

  return { data, loading, error };
}


--------------------------------------------------------------------------------

// src/hooks/useEtlData.ts

import { useState, useEffect } from "react";
import type { IFlatExtractionData } from "../interfaces";
import { getEtlData } from "../services/etlService";

export const useEtlData = () => {
  const [data, setData] = useState<IFlatExtractionData | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadData = async () => {
      try {
        setLoading(true);
        const jsonData = await getEtlData();
        setData(jsonData);
      } catch (err) {
        setError(err instanceof Error ? err.message : "An unknown error occurred");
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, []);

  return { data, loading, error };
};


--------------------------------------------------------------------------------

// src/lib/extractor.ts

import * as fs from "fs/promises";
import * as path from "path";
import { parseStringPromise } from "xml2js";
import type {
  IExtractionResult,
  IFlatExtractionData,
  IMappedTaskInstance,
} from "../interfaces/index";

import {
  ensureArray,
  mapConfig,
  mapMapping,
  mapSession,
  mapSource,
  mapTarget,
  mapTask,
  mapWorkflow,
} from "./mappingHelpers.ts";

const xmlInputDir = path.join(process.cwd(), "xml_inputs");
const outputJsonFilePath = path.join(process.cwd(), "public/extraction.json");

/**
 * Funci√≥n principal as√≠ncrona que orquesta el proceso de extracci√≥n.
 * Lee, procesa y combina m√∫ltiples archivos XML en un √∫nico JSON.
 */
async function runExtraction() {
  try {
    // 1. Asegurarse de que el directorio de salida exista
    await fs.mkdir(path.dirname(outputJsonFilePath), { recursive: true });

    // 2. Leer todos los nombres de archivo del directorio de entrada
    const files = await fs.readdir(xmlInputDir);
    const xmlFiles = files.filter(
      (file) => path.extname(file).toLowerCase() === ".xml"
    );

    if (xmlFiles.length === 0) {
      console.log(
        `No se encontraron archivos XML en el directorio: ${xmlInputDir}`
      );
      // Crear un archivo JSON vac√≠o para evitar que la aplicaci√≥n falle
      await fs.writeFile(
        outputJsonFilePath,
        JSON.stringify(
          {
            repositoryName: "N/A",
            folderName: "N/A",
            summary: {
              totalWorkflows: 0,
              totalSessions: 0,
              totalMappings: 0,
              totalSources: 0,
              totalTargets: 0,
              totalTransformations: 0,
            },
            mappings: [],
            workflows: [],
            sources: [],
            targets: [],
            sessions: [],
            configs: [],
            reusableTasks: [],
            allTasksInstances: [],
          },
          null,
          2
        )
      );
      console.log(
        `Archivo 'extraction.json' vac√≠o creado en ${outputJsonFilePath}`
      );
      return;
    }
    console.log(`Archivos XML encontrados: ${xmlFiles.join(", ")}`);

    // 3. Procesar cada archivo XML en paralelo para mayor eficiencia
    const allResults = await Promise.all(
      xmlFiles.map(async (fileName) => {
        const filePath = path.join(xmlInputDir, fileName);
        const xmlData = await fs.readFile(filePath, "utf8");
        const result: IExtractionResult = await parseStringPromise(xmlData, {
          explicitArray: false,
          mergeAttrs: true,
        });
        return result;
      })
    );

    // 4. Inicializar la estructura de datos final
    const finalExtraction: IFlatExtractionData = {
      repositoryName: "",
      folderName: "",
      summary: {
        totalWorkflows: 0,
        totalSessions: 0,
        totalMappings: 0,
        totalSources: 0,
        totalTargets: 0,
        totalTransformations: 0,
      },
      mappings: [],
      workflows: [],
      sources: [],
      targets: [],
      sessions: [],
      configs: [],
      reusableTasks: [],
      allTasksInstances: [],
    };

    // 5. Iterar y fusionar los resultados
    allResults.forEach((result, index) => {
      const powerMart = result.POWERMART;
      const folder = powerMart.REPOSITORY.FOLDER;

      if (index === 0) {
        finalExtraction.repositoryName = powerMart.REPOSITORY.NAME;
        finalExtraction.folderName = folder.NAME;
      }

      finalExtraction.sources.push(
        ...ensureArray(folder.SOURCE).map(mapSource)
      );
      finalExtraction.targets.push(
        ...ensureArray(folder.TARGET).map(mapTarget)
      );
      finalExtraction.mappings.push(
        ...ensureArray(folder.MAPPING).map(mapMapping)
      );
      finalExtraction.sessions.push(
        ...ensureArray(folder.SESSION).map(mapSession)
      );
      finalExtraction.workflows.push(
        ...ensureArray(folder.WORKFLOW).map(mapWorkflow)
      );
      finalExtraction.configs.push(
        ...ensureArray(folder.CONFIG).map(mapConfig)
      );
      finalExtraction.reusableTasks.push(
        ...ensureArray(folder.TASK).map(mapTask)
      );
    });

    // 6. Recalcular el resumen final
    finalExtraction.summary = {
      totalWorkflows: finalExtraction.workflows.length,
      totalSessions: finalExtraction.sessions.length,
      totalMappings: finalExtraction.mappings.length,
      totalSources: finalExtraction.sources.length,
      totalTargets: finalExtraction.targets.length,
      totalTransformations: finalExtraction.mappings.reduce(
        (acc, m) => acc + (m.transformations?.length || 0),
        0
      ),
    };

    // 7. Consolidar todas las instancias de tareas
    let allTasksInstances: IMappedTaskInstance[] = [];
    finalExtraction.workflows.forEach((wf) => {
      allTasksInstances.push(...wf.tasks);
    });
    finalExtraction.allTasksInstances = allTasksInstances;

    // 8. Guardar el resultado
    await fs.writeFile(
      outputJsonFilePath,
      JSON.stringify(finalExtraction, null, 2)
    );

    console.log(
      `\nExtracci√≥n completada. Datos combinados guardados en ${outputJsonFilePath}`
    );
    console.log("Resumen final:", finalExtraction.summary);
  } catch (err) {
    if (
      (err as NodeJS.ErrnoException).code === "ENOENT" &&
      (err as NodeJS.ErrnoException).path === xmlInputDir
    ) {
      console.error(
        `Error: El directorio de entrada '${xmlInputDir}' no existe. Por favor, cr√©alo y a√±ade tus archivos XML.`
      );
    } else {
      console.error("Ocurri√≥ un error durante el proceso de extracci√≥n:", err);
    }
  }
}

runExtraction();


--------------------------------------------------------------------------------

// src/lib/mappingHelpers.ts

// src/lib/mappingHelpers.ts

// Importa todas las interfaces necesarias desde el directorio de interfaces.
// Estas interfaces definen la forma de los datos tanto del XML original como de la estructura mapeada.
import type {
  IConfig,
  IConnectionReference,
  IConnector,
  IField,
  IInstance,
  IMappedAttribute,
  IMappedConfig,
  IMappedConnectionReference,
  IMappedConnector,
  IMappedField,
  IMappedInstance,
  IMappedMapping,
  IMappedMappingVariable,
  IMappedMetadataExtension,
  IMappedScheduler,
  IMappedSession,
  IMappedSessionComponent,
  IMappedSessionExtension,
  IMappedSessTransformationInst,
  IMappedSource,
  IMappedTarget,
  IMappedTargetLoadOrder,
  IMappedTask,
  IMappedTaskInstance,
  IMappedTransformation,
  IMappedTransformField,
  IMappedValuePair,
  IMappedWorkflow,
  IMappedWorkflowLink,
  IMappedWorkflowVariable,
  IMapping,
  IMappingVariable,
  IMetaDataExtension,
  IScheduler,
  ISession,
  ISessionComponent,
  ISessionExtension,
  ISessTransformationInst,
  ISource,
  ITableAttribute,
  ITarget,
  ITargetLoadOrder,
  ITask,
  ITaskInstance,
  ITransformation,
  ITransformField,
  IValuePair,
  IWorkflow,
  IWorkflowLink,
  IWorkflowVariable,
} from "../interfaces/index";

/**
 * Helper para asegurar que un elemento siempre se trate como un array.
 * @param item El elemento a normalizar.
 * @returns Un array de elementos.
 */
export function ensureArray<T>(item: T | T[] | undefined | null): T[] {
  if (item === undefined || item === null) {
    return [];
  }
  return Array.isArray(item) ? item : [item];
}

export function mapAttribute(attr: ITableAttribute): IMappedAttribute {
  return {
    name: attr.NAME,
    value: attr.VALUE,
  };
}

export function mapField(field: IField): IMappedField {
  return {
    name: field.NAME,
    dataType: field.DATATYPE,
    keyType: field.KEYTYPE,
    nullable: field.NULLABLE,
    precision: field.PRECISION,
    scale: field.SCALE,
    description: field.DESCRIPTION,
    length: field.LENGTH,
    physicalLength: field.PHYSICALLENGTH,
    fieldProperty: field.FIELDPROPERTY,
    fieldType: field.FIELDTYPE,
    hidden: field.HIDDEN,
    level: field.LEVEL,
    occurs: field.OCCURS,
    offset: field.OFFSET,
    usage_flags: field.USAGE_FLAGS,
  };
}

export function mapSource(source: ISource): IMappedSource {
  return {
    name: source.NAME,
    databaseType: source.DATABASETYPE,
    ownerName: source.OWNERNAME,
    description: source.DESCRIPTION,
    fields: ensureArray(source.SOURCEFIELD).map(mapField),
    isFlatFile: !!source.FLATFILE,
    attributes: ensureArray(source.TABLEATTRIBUTE).map(mapAttribute),
  };
}

export function mapTarget(target: ITarget): IMappedTarget {
  return {
    name: target.NAME,
    databaseType: target.DATABASETYPE,
    description: target.DESCRIPTION,
    fields: ensureArray(target.TARGETFIELD).map(mapField),
    attributes: ensureArray(target.TABLEATTRIBUTE).map(mapAttribute),
  };
}

export function mapTransformField(
  field: ITransformField
): IMappedTransformField {
  return {
    name: field.NAME,
    portType: field.PORTTYPE,
    dataType: field.DATATYPE,
    precision: field.PRECISION,
    scale: field.SCALE,
    expression: field.EXPRESSION,
    expressionType: field.EXPRESSIONTYPE,
    description: field.DESCRIPTION,
    isSortKey: field.ISSORTKEY,
    sortDirection: field.SORTDIRECTION,
    defaultValue: field.DEFAULTVALUE,
    pictureText: field.PICTURETEXT,
  };
}

export function mapMetadataExtension(
  ext: IMetaDataExtension
): IMappedMetadataExtension {
  return {
    name: ext.NAME,
    value: ext.VALUE,
    dataType: ext.DATATYPE,
    description: ext.DESCRIPTION,
    vendorName: ext.VENDORNAME,
    domainName: ext.DOMAINNAME,
    isClientEditable: ext.ISCLIENTEDITABLE,
    isClientVisible: ext.ISCLIENTVISIBLE,
    isReusable: ext.ISREUSABLE,
    isShareRead: ext.ISSHAREREAD,
    isShareWrite: ext.ISSHAREWRITE,
    maxLength: ext.MAXLENGTH,
  };
}

export function mapTransformation(
  trans: ITransformation
): IMappedTransformation {
  return {
    name: trans.NAME,
    type: trans.TYPE,
    description: trans.DESCRIPTION,
    reusable: trans.REUSABLE,
    fields: ensureArray(trans.TRANSFORMFIELD).map(mapTransformField),
    attributes: ensureArray(trans.TABLEATTRIBUTE).map(mapAttribute),
    metadataExtensions: ensureArray(trans.METADATAEXTENSION).map(
      mapMetadataExtension
    ),
  };
}

export function mapInstance(instance: IInstance): IMappedInstance {
  return {
    name: instance.NAME,
    type: instance.TYPE,
    transformationName: instance.TRANSFORMATION_NAME,
    transformationType: instance.TRANSFORMATION_TYPE,
    description: instance.DESCRIPTION,
    associatedSourceInstanceName: instance.ASSOCIATED_SOURCE_INSTANCE?.NAME,
    attributes: ensureArray(instance.TABLEATTRIBUTE).map(mapAttribute),
  };
}

export function mapConnector(connector: IConnector): IMappedConnector {
  return {
    fromField: connector.FROMFIELD,
    fromInstance: connector.FROMINSTANCE,
    fromInstanceType: connector.FROMINSTANCETYPE,
    toField: connector.TOFIELD,
    toInstance: connector.TOINSTANCE,
    toInstanceType: connector.TOINSTANCETYPE,
  };
}

export function mapTargetLoadOrder(
  tlo: ITargetLoadOrder
): IMappedTargetLoadOrder {
  return {
    order: tlo.ORDER,
    targetInstance: tlo.TARGETINSTANCE,
  };
}

export function mapMappingVariable(
  mv: IMappingVariable
): IMappedMappingVariable {
  return {
    name: mv.NAME,
    dataType: mv.DATATYPE,
    isParam: mv.ISPARAM,
    defaultValue: mv.DEFAULTVALUE,
    precision: mv.PRECISION,
    scale: mv.SCALE,
    isExpressionVariable: mv.ISEXPRESSIONVARIABLE,
    userDefined: mv.USERDEFINED,
    description: mv.DESCRIPTION,
  };
}

export function mapMapping(mapping: IMapping): IMappedMapping {
  return {
    name: mapping.NAME,
    isValid: mapping.ISVALID,
    description: mapping.DESCRIPTION,
    transformations: ensureArray(mapping.TRANSFORMATION).map(mapTransformation),
    instances: ensureArray(mapping.INSTANCE).map(mapInstance),
    connectors: ensureArray(mapping.CONNECTOR).map(mapConnector),
    targetLoadOrders: ensureArray(mapping.TARGETLOADORDER).map(
      mapTargetLoadOrder
    ),
    variables: ensureArray(mapping.MAPPINGVARIABLE).map(mapMappingVariable),
  };
}

export function mapValuePair(vp: IValuePair): IMappedValuePair {
  return {
    name: vp.NAME,
    value: vp.VALUE,
    execOrder: vp.EXECORDER,
    reverseAssignment: vp.REVERSEASSIGNMENT,
  };
}

export function mapTask(task: ITask): IMappedTask {
  return {
    name: task.NAME,
    type: task.TYPE,
    description: task.DESCRIPTION,
    reusable: task.REUSABLE,
    versionNumber: task.VERSIONNUMBER,
    attributes: ensureArray(task.ATTRIBUTE).map(mapAttribute),
    valuePairs: ensureArray(task.VALUEPAIR).map(mapValuePair),
  };
}

export function mapTaskInstance(taskInst: ITaskInstance): IMappedTaskInstance {
  return {
    name: taskInst.NAME,
    taskName: taskInst.TASKNAME,
    taskType: taskInst.TASKTYPE,
    isEnabled: taskInst.ISENABLED,
    failParentIfFails: taskInst.FAIL_PARENT_IF_INSTANCE_FAILS,
    failParentIfDidNotRun: taskInst.FAIL_PARENT_IF_INSTANCE_DID_NOT_RUN,
    treatInputLinkAsAnd: taskInst.TREAT_INPUTLINK_AS_AND,
    attributes: ensureArray(taskInst.ATTRIBUTE).map(mapAttribute),
    description: taskInst.DESCRIPTION,
    reusable: taskInst.REUSABLE,
    decisionName: taskInst["Decision Name"],
  };
}

export function mapWorkflowLink(link: IWorkflowLink): IMappedWorkflowLink {
  return {
    fromTask: link.FROMTASK,
    toTask: link.TOTASK,
    condition: link.CONDITION,
  };
}

export function mapWorkflowVariable(
  wfVar: IWorkflowVariable
): IMappedWorkflowVariable {
  return {
    name: wfVar.NAME,
    dataType: wfVar.DATATYPE,
    userDefined: wfVar.USERDEFINED,
    defaultValue: wfVar.DEFAULTVALUE,
    isPersistent: wfVar.ISPERSISTENT,
    description: wfVar.DESCRIPTION,
    isNull: wfVar.ISNULL,
  };
}

export function mapScheduler(scheduler: IScheduler): IMappedScheduler {
  return {
    name: scheduler.NAME,
    scheduleType: scheduler.SCHEDULEINFO?.SCHEDULETYPE || "UNKNOWN",
    description: scheduler.DESCRIPTION,
  };
}

export function mapWorkflow(workflow: IWorkflow): IMappedWorkflow {
  return {
    name: workflow.NAME,
    isValid: workflow.ISVALID,
    isEnabled: workflow.ISENABLED,
    description: workflow.DESCRIPTION,
    serverName: workflow.SERVERNAME,
    tasks: ensureArray(workflow.TASKINSTANCE).map(mapTaskInstance),
    links: ensureArray(workflow.WORKFLOWLINK).map(mapWorkflowLink),
    variables: ensureArray(workflow.WORKFLOWVARIABLE).map(mapWorkflowVariable),
    attributes: ensureArray(workflow.ATTRIBUTE).map(mapAttribute),
    scheduler: mapScheduler(workflow.SCHEDULER),
  };
}

export function mapSessTransformationInst(
  stInst: ISessTransformationInst
): IMappedSessTransformationInst {
  return {
    instanceName: stInst.SINSTANCENAME,
    transformationName: stInst.TRANSFORMATIONNAME,
    transformationType: stInst.TRANSFORMATIONTYPE,
    pipeline: stInst.PIPELINE,
    stage: stInst.STAGE,
    isRepartitionPoint: stInst.ISREPARTITIONPOINT,
    partitionType: stInst.PARTITIONTYPE,
    attributes: ensureArray(stInst.ATTRIBUTE).map(mapAttribute),
    partition: ensureArray(stInst.PARTITION).map((p) => ({
      name: p.NAME,
      description: p.DESCRIPTION,
    })),
  };
}

export function mapConnectionReference(
  connRef: IConnectionReference
): IMappedConnectionReference {
  return {
    name: connRef.CNXREFNAME,
    type: connRef.CONNECTIONTYPE,
    variable: connRef.VARIABLE,
    connectionName: connRef.CONNECTIONNAME,
    connectionNumber: connRef.CONNECTIONNUMBER,
    connectionSubtype: connRef.CONNECTIONSUBTYPE,
  };
}

export function mapSessionExtension(
  sessExt: ISessionExtension
): IMappedSessionExtension {
  return {
    name: sessExt.NAME,
    instanceName: sessExt.SINSTANCENAME,
    subType: sessExt.SUBTYPE,
    transformationType: sessExt.TRANSFORMATIONTYPE,
    type: sessExt.TYPE,
    connectionReference: sessExt.CONNECTIONREFERENCE
      ? mapConnectionReference(sessExt.CONNECTIONREFERENCE)
      : undefined,
    attributes: ensureArray(sessExt.ATTRIBUTE).map(mapAttribute),
    dsqInstanceName: sessExt.DSQINSTNAME,
    dsqInstanceType: sessExt.DSQINSTTYPE,
  };
}

export function mapSessionComponent(
  sessComp: ISessionComponent
): IMappedSessionComponent {
  return {
    refObjectName: sessComp.REFOBJECTNAME,
    reusable: sessComp.REUSABLE,
    type: sessComp.TYPE,
  };
}

export function mapSession(session: ISession): IMappedSession {
  return {
    name: session.NAME,
    mappingName: session.MAPPINGNAME,
    isValid: session.ISVALID,
    description: session.DESCRIPTION,
    reusable: session.REUSABLE,
    versionNumber: session.VERSIONNUMBER,
    sortOrder: session.SORTORDER,
    transformationInstances: ensureArray(session.SESSTRANSFORMATIONINST).map(
      mapSessTransformationInst
    ),
    sessionExtensions: ensureArray(session.SESSIONEXTENSION).map(
      mapSessionExtension
    ),
    attributes: ensureArray(session.ATTRIBUTE).map(mapAttribute),
    configReferenceName: session.CONFIGREFERENCE?.REFOBJECTNAME || "UNKNOWN",
    sessionComponents: ensureArray(session.SESSIONCOMPONENT).map(
      mapSessionComponent
    ),
  };
}

export function mapConfig(config: IConfig): IMappedConfig {
  return {
    name: config.NAME,
    isDefault: config.ISDEFAULT,
    description: config.DESCRIPTION,
    versionNumber: config.VERSIONNUMBER,
    attributes: ensureArray(config.ATTRIBUTE).map(mapAttribute),
  };
}


--------------------------------------------------------------------------------

// src/assets/react.svg

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>


--------------------------------------------------------------------------------

// src/pages/Sources.tsx

import { useAppData } from "../components/layout/MainLayout";
import { Card } from "../components/ui/Card";

const Sources = () => {
  const { data, searchTerm } = useAppData();

  const filteredSources = data?.sources?.filter((source) =>
    source.name?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const totalSources = data?.sources?.length || 0;
  const flatFileSources = data?.sources?.filter(s => s.isFlatFile).length || 0;
  const databaseSources = totalSources - flatFileSources;
  const sourcesWithFields = data?.sources?.filter(s => s.fields && s.fields.length > 0).length || 0;

  // Function to find dependencies for a source
  const getSourceDependencies = (sourceName: string) => {
    const dependencies: { type: string; name: string; mapping?: string; workflow?: string }[] = [];
    const seen = new Set<string>();

    // Find mappings that use this source
    const relatedMappings = data?.mappings?.filter(mapping =>
      mapping.instances?.some(instance =>
        instance.type === "SOURCE" && instance.transformationName === sourceName
      )
    ) || [];

    relatedMappings.forEach(mapping => {
      const mappingKey = `Mapping:${mapping.name}`;
      if (!seen.has(mappingKey)) {
        seen.add(mappingKey);
        dependencies.push({
          type: "Mapping",
          name: mapping.name
        });
      }

      // Find sessions that use this mapping
      const relatedSessions = data?.sessions?.filter(session =>
        session.mappingName === mapping.name
      ) || [];

      relatedSessions.forEach(session => {
        const sessionKey = `Session:${session.name}`;
        if (!seen.has(sessionKey)) {
          seen.add(sessionKey);
          dependencies.push({
            type: "Session",
            name: session.name,
            mapping: mapping.name
          });
        }

        // Find workflows that contain this session
        const relatedWorkflows = data?.workflows?.filter(workflow =>
          workflow.tasks?.some(task => task.taskName === session.name)
        ) || [];

        relatedWorkflows.forEach(workflow => {
          const workflowKey = `Workflow:${workflow.name}`;
          if (!seen.has(workflowKey)) {
            seen.add(workflowKey);
            dependencies.push({
              type: "Workflow",
              name: workflow.name,
              mapping: mapping.name
            });
          }
        });
      });
    });

    return dependencies;
  };

  return (
    <div className="space-y-8">
      {/* Header Section */}
      <div className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md">
        <div className="flex items-center space-x-4 mb-6">
          <div className="w-12 h-12 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-xl flex items-center justify-center shadow-lg">
            <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4" />
            </svg>
          </div>
          <div>
            <h1 className="text-2xl font-bold text-slate-900">Sources</h1>
            <p className="text-slate-600">Gesti√≥n de fuentes de datos y dependencias</p>
          </div>
        </div>

        {/* Statistics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div className="bg-gradient-to-br from-purple-50 to-purple-100 rounded-xl p-4">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-purple-500 rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4" />
                </svg>
              </div>
              <div>
                <p className="text-sm text-purple-600 font-medium">Total</p>
                <p className="text-2xl font-bold text-purple-900">{totalSources}</p>
              </div>
            </div>
          </div>

          <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl p-4">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2" />
                </svg>
              </div>
              <div>
                <p className="text-sm text-blue-600 font-medium">Base de Datos</p>
                <p className="text-2xl font-bold text-blue-900">{databaseSources}</p>
              </div>
            </div>
          </div>

          <div className="bg-gradient-to-br from-green-50 to-green-100 rounded-xl p-4">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-green-500 rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
              </div>
              <div>
                <p className="text-sm text-green-600 font-medium">Archivos Planos</p>
                <p className="text-2xl font-bold text-green-900">{flatFileSources}</p>
              </div>
            </div>
          </div>

          <div className="bg-gradient-to-br from-orange-50 to-orange-100 rounded-xl p-4">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-orange-500 rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                </svg>
              </div>
              <div>
                <p className="text-sm text-orange-600 font-medium">Con Campos</p>
                <p className="text-2xl font-bold text-orange-900">{sourcesWithFields}</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Sources Grid */}
      <div className="space-y-6">
        {searchTerm && (
          <div className="bg-purple-50 border border-purple-200 rounded-xl p-4">
            <div className="flex items-center space-x-2">
              <svg className="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
              <p className="text-purple-800">
                Mostrando resultados para: <span className="font-semibold">"{searchTerm}"</span>
              </p>
              {filteredSources && (
                <span className="text-purple-600">({filteredSources.length} encontradas)</span>
              )}
            </div>
          </div>
        )}

        {filteredSources && filteredSources.length > 0 ? (
          <div className="space-y-6">
            {filteredSources.map((source) => {
              const dependencies = getSourceDependencies(source.name);

              return (
                <div key={source.name} className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md hover:shadow-lg transition-all duration-200">
                  <div className="flex flex-col lg:flex-row gap-6">
                    {/* Left side: Source Card */}
                    <div className="lg:w-1/3">
                      <div className="bg-gradient-to-br from-purple-50 to-indigo-50 rounded-xl p-6 h-full">
                        <div className="flex items-center space-x-3 mb-4">
                          <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-lg flex items-center justify-center">
                            <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4" />
                            </svg>
                          </div>
                          <div>
                            <h3 className="text-lg font-bold text-slate-900">{source.name}</h3>
                            <p className="text-sm text-slate-600">Source</p>
                          </div>
                        </div>

                        <div className="space-y-3 mb-4">
                          <div className="flex items-center justify-between">
                            <span className="text-sm text-slate-600">Tipo:</span>
                            <span className="text-sm font-medium text-slate-900">{source.databaseType}</span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-sm text-slate-600">Owner:</span>
                            <span className="text-sm font-medium text-slate-900">{source.ownerName}</span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-sm text-slate-600">Campos:</span>
                            <span className="text-sm font-medium text-slate-900">{source.fields?.length || 0}</span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-sm text-slate-600">Tipo de archivo:</span>
                            <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                              source.isFlatFile 
                                ? "bg-green-100 text-green-800" 
                                : "bg-blue-100 text-blue-800"
                            }`}>
                              <div className={`w-1.5 h-1.5 rounded-full mr-1 ${
                                source.isFlatFile ? "bg-green-400" : "bg-blue-400"
                              }`}></div>
                              {source.isFlatFile ? "Archivo Plano" : "Base de Datos"}
                            </span>
                          </div>
                        </div>

                        {source.description && (
                          <div className="p-3 bg-white rounded-lg mb-4">
                            <p className="text-xs text-slate-500 mb-1">Descripci√≥n</p>
                            <p className="text-sm text-slate-700">{source.description}</p>
                          </div>
                        )}

                        <Card
                          title=""
                          to={`/powercenter/sources/${source.name}`}
                          titleClassName="!p-0 !border-0 !shadow-none !bg-transparent"
                        >
                          <div className="w-full bg-gradient-to-r from-purple-500 to-indigo-600 text-white rounded-lg p-3 text-center font-medium hover:from-purple-600 hover:to-indigo-700 transition-all duration-200">
                            Ver Detalles
                          </div>
                        </Card>
                      </div>
                    </div>

                    {/* Right side: Dependencies */}
                    <div className="lg:w-2/3">
                      <div className="mb-4">
                        <h4 className="text-lg font-semibold text-slate-900 mb-2">Dependencias</h4>
                        <p className="text-sm text-slate-600">Mappings, sessions y workflows que utilizan esta fuente</p>
                      </div>

                      {dependencies.length > 0 ? (
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                          {/* Column 1: Mappings */}
                          <div className="bg-blue-50 rounded-xl p-4">
                            <div className="flex items-center space-x-2 mb-3">
                              <div className="w-6 h-6 bg-blue-500 rounded-lg flex items-center justify-center">
                                <svg className="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
                                </svg>
                              </div>
                              <h5 className="text-sm font-semibold text-blue-800">
                                Mappings ({dependencies.filter(dep => dep.type === 'Mapping').length})
                              </h5>
                            </div>
                            <div className="space-y-2 max-h-40 overflow-y-auto">
                              {dependencies.filter(dep => dep.type === 'Mapping').length > 0 ? (
                                dependencies.filter(dep => dep.type === 'Mapping').map((dep, index) => (
                                  <div key={index} className="bg-white rounded-lg p-3 border border-blue-200">
                                    <div className="flex items-center justify-between">
                                      <p className="font-medium text-sm text-slate-900 truncate">{dep.name}</p>
                                      <button
                                        onClick={() => window.open(`/powercenter/mappings/${dep.name}`, '_blank')}
                                        className="text-blue-600 hover:text-blue-800 text-xs font-medium px-2 py-1 rounded bg-blue-100 hover:bg-blue-200 transition-colors duration-200"
                                      >
                                        Ver
                                      </button>
                                    </div>
                                  </div>
                                ))
                              ) : (
                                <div className="text-center py-4">
                                  <p className="text-blue-600 text-sm">Sin mappings</p>
                                </div>
                              )}
                            </div>
                          </div>

                          {/* Column 2: Sessions */}
                          <div className="bg-green-50 rounded-xl p-4">
                            <div className="flex items-center space-x-2 mb-3">
                              <div className="w-6 h-6 bg-green-500 rounded-lg flex items-center justify-center">
                                <svg className="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4" />
                                </svg>
                              </div>
                              <h5 className="text-sm font-semibold text-green-800">
                                Sessions ({dependencies.filter(dep => dep.type === 'Session').length})
                              </h5>
                            </div>
                            <div className="space-y-2 max-h-40 overflow-y-auto">
                              {dependencies.filter(dep => dep.type === 'Session').length > 0 ? (
                                dependencies.filter(dep => dep.type === 'Session').map((dep, index) => (
                                  <div key={index} className="bg-white rounded-lg p-3 border border-green-200">
                                    <div className="flex items-center justify-between">
                                      <div className="flex-1 min-w-0">
                                        <p className="font-medium text-sm text-slate-900 truncate">{dep.name}</p>
                                        <p className="text-xs text-green-600 truncate">Map: {dep.mapping}</p>
                                      </div>
                                      <button
                                        onClick={() => window.open(`/powercenter/sessions/${dep.name}`, '_blank')}
                                        className="text-green-600 hover:text-green-800 text-xs font-medium px-2 py-1 rounded bg-green-100 hover:bg-green-200 transition-colors duration-200 ml-2"
                                      >
                                        Ver
                                      </button>
                                    </div>
                                  </div>
                                ))
                              ) : (
                                <div className="text-center py-4">
                                  <p className="text-green-600 text-sm">Sin sessions</p>
                                </div>
                              )}
                            </div>
                          </div>

                          {/* Column 3: Workflows */}
                          <div className="bg-purple-50 rounded-xl p-4">
                            <div className="flex items-center space-x-2 mb-3">
                              <div className="w-6 h-6 bg-purple-500 rounded-lg flex items-center justify-center">
                                <svg className="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
                                </svg>
                              </div>
                              <h5 className="text-sm font-semibold text-purple-800">
                                Workflows ({dependencies.filter(dep => dep.type === 'Workflow').length})
                              </h5>
                            </div>
                            <div className="space-y-2 max-h-40 overflow-y-auto">
                              {dependencies.filter(dep => dep.type === 'Workflow').length > 0 ? (
                                dependencies.filter(dep => dep.type === 'Workflow').map((dep, index) => (
                                  <div key={index} className="bg-white rounded-lg p-3 border border-purple-200">
                                    <div className="flex items-center justify-between">
                                      <div className="flex-1 min-w-0">
                                        <p className="font-medium text-sm text-slate-900 truncate">{dep.name}</p>
                                        <p className="text-xs text-purple-600 truncate">Map: {dep.mapping}</p>
                                      </div>
                                      <button
                                        onClick={() => window.open(`/powercenter/workflows/${dep.name}`, '_blank')}
                                        className="text-purple-600 hover:text-purple-800 text-xs font-medium px-2 py-1 rounded bg-purple-100 hover:bg-purple-200 transition-colors duration-200 ml-2"
                                      >
                                        Ver
                                      </button>
                                    </div>
                                  </div>
                                ))
                              ) : (
                                <div className="text-center py-4">
                                  <p className="text-purple-600 text-sm">Sin workflows</p>
                                </div>
                              )}
                            </div>
                          </div>
                        </div>
                      ) : (
                        <div className="bg-slate-50 rounded-xl p-8 text-center">
                          <div className="w-12 h-12 bg-slate-200 rounded-full flex items-center justify-center mx-auto mb-3">
                            <svg className="w-6 h-6 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                            </svg>
                          </div>
                          <p className="text-slate-600 font-medium">No se encontraron dependencias</p>
                          <p className="text-slate-500 text-sm">Esta fuente no est√° siendo utilizada por ning√∫n mapping, session o workflow</p>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        ) : (
          <div className="bg-white rounded-2xl border border-slate-200/60 p-12 shadow-md text-center">
            <div className="w-16 h-16 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg className="w-8 h-8 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4" />
              </svg>
            </div>
            <h3 className="text-lg font-semibold text-slate-900 mb-2">
              {searchTerm ? "No se encontraron sources" : "No hay sources disponibles"}
            </h3>
            <p className="text-slate-600">
              {searchTerm 
                ? `No se encontraron sources que coincidan con "${searchTerm}"`
                : "No hay sources configuradas en el sistema"
              }
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default Sources;


--------------------------------------------------------------------------------

// src/pages/Details.tsx

import { useNavigate, useParams } from "react-router-dom";
import { useAppData } from "../components/layout/MainLayout";
import { Button } from "../components/ui/Button";
import { Loader } from "../components/ui/Loader";
import { SqlCodeViewer } from "../components/ui/SqlCodeViewer";
import type {
  IMappedMapping,
  IMappedSession,
  IMappedSource,
  IMappedTarget,
  IMappedWorkflow,
} from "../interfaces";

const Details = () => {
  const { objectType, objectId } = useParams<{
    objectType: string;
    objectId: string;
  }>();
  const navigate = useNavigate();
  const { data } = useAppData();

  if (!data) return <Loader />;

  // Find the object based on type and id
  let object:
    | IMappedMapping
    | IMappedWorkflow
    | IMappedSession
    | IMappedSource
    | IMappedTarget
    | null = null;
  let dependencies: string[] = [];

  switch (objectType) {
    case "mappings":
      object = data.mappings.find((m) => m.name === objectId) || null;
      if (object) {
        // Find dependencies: sources, targets, transformations
        const mapping = object as IMappedMapping;
        dependencies = [
          ...mapping.instances
            .filter((i) => i.type === "SOURCE")
            .map((i) => `Source: ${i.transformationName}`),
          ...mapping.instances
            .filter((i) => i.type === "TARGET")
            .map((i) => `Target: ${i.transformationName}`),
          ...mapping.transformations.map(
            (t) => `Transformation: ${t.name} (${t.type})`
          ),
        ];
      }
      break;
    case "workflows":
      object = data.workflows.find((w) => w.name === objectId) || null;
      if (object) {
        const workflow = object as IMappedWorkflow;
        dependencies = workflow.tasks.map(
          (t) => `Task: ${t.name} (${t.taskType})`
        );
      }
      break;
    case "sessions":
      object = data.sessions.find((s) => s.name === objectId) || null;
      if (object) {
        const session = object as IMappedSession;
        dependencies = [`Mapping: ${session.mappingName}`];
      }
      break;
    case "sources":
      object = data.sources.find((s) => s.name === objectId) || null;
      break;
    case "targets":
      object = data.targets.find((t) => t.name === objectId) || null;
      break;
    default:
      object = null;
  }

  if (!object) {
    return (
      <div className="flex items-center justify-center min-h-[60vh] p-6">
        <div className="max-w-lg w-full text-center">
          <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <svg className="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>
          </div>
          <h2 className="text-2xl font-bold text-slate-900 mb-3">
            Objeto no encontrado
          </h2>
          <p className="text-slate-600 mb-6 leading-relaxed">
            El {objectType} "<span className="font-semibold text-slate-800">{objectId}</span>" no pudo ser encontrado.
          </p>
          <div className="space-y-3">
            <Button
              onClick={() => navigate(-1)}
              variant="primary"
              size="lg"
              fullWidth
              icon={
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
              }
            >
              Volver atr√°s
            </Button>
            <Button
              to="/"
              variant="ghost"
              size="md"
              fullWidth
            >
              Ir al Dashboard
            </Button>
          </div>
        </div>
      </div>
    );
  }

  const renderObjectDetails = () => {
    switch (objectType) {
      case "mappings":
        const mapping = object as IMappedMapping;

        // Categorize components with distinct filtering
        const sourceNames = Array.from(
          new Set(
            mapping.instances
              .filter((i) => i.type === "SOURCE")
              .map((i) => i.transformationName)
          )
        );

        const sources = sourceNames
          .map((name) =>
            mapping.instances.find(
              (i) => i.type === "SOURCE" && i.transformationName === name
            )
          )
          .filter(
            (source): source is NonNullable<typeof source> =>
              source !== undefined
          );

        const targetNames = Array.from(
          new Set(
            mapping.instances
              .filter((i) => i.type === "TARGET")
              .map((i) => i.transformationName)
          )
        );

        const targets = targetNames
          .map((name) =>
            mapping.instances.find(
              (i) => i.type === "TARGET" && i.transformationName === name
            )
          )
          .filter(
            (target): target is NonNullable<typeof target> =>
              target !== undefined
          );
        const sourceQualifiers = mapping.transformations.filter(
          (t) => t.type === "Source Qualifier"
        );
        const otherTransformations = mapping.transformations.filter(
          (t) => t.type !== "Source Qualifier"
        );

        return (
          <>
            {/* Header del Mapping */}
            <div className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md mb-8">
              <div className="flex items-start justify-between mb-6">
                <div className="flex items-center space-x-4">
                  <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg">
                    <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
                    </svg>
                  </div>
                  <div>
                    <h1 className="text-2xl font-bold text-slate-900">{mapping.name}</h1>
                    <p className="text-slate-600 mt-1">Mapping de transformaci√≥n de datos</p>
                  </div>
                </div>
                <div className="flex items-center space-x-3">
                  <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                    mapping.isValid === "YES" 
                      ? "bg-green-100 text-green-800" 
                      : "bg-red-100 text-red-800"
                  }`}>
                    <div className={`w-2 h-2 rounded-full mr-2 ${
                      mapping.isValid === "YES" ? "bg-green-400" : "bg-red-400"
                    }`}></div>
                    {mapping.isValid === "YES" ? "V√°lido" : "Inv√°lido"}
                  </span>
                  <Button
                    onClick={() => navigate(-1)}
                    variant="ghost"
                    size="sm"
                    icon={
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                      </svg>
                    }
                  >
                    Volver
                  </Button>
                </div>
              </div>

              {/* Informaci√≥n b√°sica mejorada */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl p-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      </svg>
                    </div>
                    <div>
                      <p className="text-sm text-blue-600 font-medium">Transformaciones</p>
                      <p className="text-xl font-bold text-blue-900">{mapping.transformations.length}</p>
                    </div>
                  </div>
                </div>

                <div className="bg-gradient-to-br from-green-50 to-green-100 rounded-xl p-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-green-500 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2h2a2 2 0 002-2z" />
                      </svg>
                    </div>
                    <div>
                      <p className="text-sm text-green-600 font-medium">Instancias</p>
                      <p className="text-xl font-bold text-green-900">{mapping.instances.length}</p>
                    </div>
                  </div>
                </div>

                <div className="bg-gradient-to-br from-purple-50 to-purple-100 rounded-xl p-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-purple-500 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                      </svg>
                    </div>
                    <div>
                      <p className="text-sm text-purple-600 font-medium">Conectores</p>
                      <p className="text-xl font-bold text-purple-900">{mapping.connectors.length}</p>
                    </div>
                  </div>
                </div>

                <div className="bg-gradient-to-br from-orange-50 to-orange-100 rounded-xl p-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-orange-500 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM7 3H5a2 2 0 00-2 2v12a4 4 0 004 4h2a2 2 0 002-2V5a2 2 0 00-2-2z" />
                      </svg>
                    </div>
                    <div>
                      <p className="text-sm text-orange-600 font-medium">Variables</p>
                      <p className="text-xl font-bold text-orange-900">{mapping.variables.length}</p>
                    </div>
                  </div>
                </div>
              </div>

              {mapping.description && (
                <div className="mt-6 p-4 bg-slate-50 rounded-xl">
                  <h4 className="text-sm font-semibold text-slate-700 mb-2">Descripci√≥n</h4>
                  <p className="text-slate-600">{mapping.description}</p>
                </div>
              )}
            </div>

            {/* Sources y Source Qualifiers */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
              {/* Sources */}
              <div className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md">
                <div className="flex items-center space-x-3 mb-6">
                  <div className="w-10 h-10 bg-gradient-to-br from-green-500 to-emerald-600 rounded-lg flex items-center justify-center">
                    <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-lg font-bold text-slate-900">Sources</h3>
                    <p className="text-sm text-slate-600">{sources.length} fuentes de datos</p>
                  </div>
                </div>
                
                <div className="space-y-4">
                  {sources.map((source, index) => (
                    <div
                      key={index}
                      className="bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200/60 rounded-xl p-4 hover:shadow-md transition-all duration-200"
                    >
                      <div className="flex items-start justify-between mb-3">
                        <h4 className="font-semibold text-green-900 text-base">
                          {source.transformationName}
                        </h4>
                        <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                          {source.type}
                        </span>
                      </div>
                      
                      <div className="space-y-2">
                        {source.name && (
                          <div className="flex items-center space-x-2">
                            <svg className="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0V6a2 2 0 012 2v6a2 2 0 01-2 2H8a2 2 0 01-2-2V8a2 2 0 012-2h8z" />
                            </svg>
                            <span className="text-sm text-green-700 font-medium">Nombre de negocio:</span>
                            <span className="text-sm text-green-800">{source.name}</span>
                          </div>
                        )}
                        
                        {source.description && (
                          <div className="flex items-start space-x-2">
                            <svg className="w-4 h-4 text-green-600 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            <div>
                              <span className="text-sm text-green-700 font-medium">Descripci√≥n:</span>
                              <p className="text-sm text-green-800 mt-1">{source.description}</p>
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                  
                  {sources.length === 0 && (
                    <div className="text-center py-8">
                      <svg className="w-12 h-12 text-slate-400 mx-auto mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
                      </svg>
                      <p className="text-slate-500">No hay sources configurados</p>
                    </div>
                  )}
                </div>
              </div>

              {/* Source Qualifiers */}
              <div className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md">
                <div className="flex items-center space-x-3 mb-6">
                  <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-lg flex items-center justify-center">
                    <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-lg font-bold text-slate-900">Source Qualifiers</h3>
                    <p className="text-sm text-slate-600">{sourceQualifiers.length} calificadores de fuente</p>
                  </div>
                </div>
                
                <div className="space-y-4">
                  {sourceQualifiers.map((sq, index) => (
                    <div
                      key={index}
                      className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200/60 rounded-xl p-4 hover:shadow-md transition-all duration-200"
                    >
                      <div className="flex items-start justify-between mb-3">
                        <h4 className="font-semibold text-blue-900 text-base">{sq.name}</h4>
                        <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                          {sq.type}
                        </span>
                      </div>
                      
                      {sq.description && (
                        <div className="flex items-start space-x-2 mb-4">
                          <svg className="w-4 h-4 text-blue-600 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                          <div>
                            <span className="text-sm text-blue-700 font-medium">Descripci√≥n:</span>
                            <p className="text-sm text-blue-800 mt-1">{sq.description}</p>
                          </div>
                        </div>
                      )}

                      {/* Source Qualifier Attributes */}
                      {sq.attributes && sq.attributes.length > 0 && (
                        <div className="mt-4">
                          <div className="flex items-center space-x-2 mb-3">
                            <svg className="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                            </svg>
                            <h5 className="text-sm font-semibold text-blue-700">
                              Atributos ({sq.attributes.length})
                            </h5>
                          </div>
                          <div className="space-y-3">
                            {sq.attributes.map((attr, i) => {
                              if (
                                (i === 3 && attr.value === "0") ||
                                (i === 4 && attr.value === "Normal") ||
                                (i === 5 && attr.value === "NO") ||
                                (i === 6 && attr.value === "NO") ||
                                (i === 9 && attr.value === "NO") ||
                                (i === 10 && attr.value === "Never") ||
                                !attr.value
                              ) {
                                return null;
                              }

                              const isSqlAttribute = ['Sql Query', 'Pre SQL', 'Post SQL', 'Source Filter'].includes(attr.name);
                              const sqlType = attr.name === 'Post SQL' ? 'post' : 'pre';

                              return (
                                <div
                                  key={i}
                                  className="bg-white border border-blue-200/60 rounded-lg p-3 shadow-sm"
                                >
                                  <div className="flex items-center justify-between mb-2">
                                    <span className="text-sm font-medium text-blue-900">{attr.name}</span>
                                    <span className="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-blue-50 text-blue-700 border border-blue-200">
                                      {attr.name}
                                    </span>
                                  </div>
                                  {isSqlAttribute ? (
                                    <SqlCodeViewer
                                      sql={attr.value}
                                      title={attr.name}
                                      type={sqlType}
                                      maxHeight="200px"
                                    />
                                  ) : (
                                    <div className="text-sm text-blue-800">
                                      {attr.value}
                                    </div>
                                  )}
                                </div>
                              );
                            })}
                          </div>
                        </div>
                      )}
                    </div>
                  ))}
                  
                  {sourceQualifiers.length === 0 && (
                    <div className="text-center py-8">
                      <svg className="w-12 h-12 text-slate-400 mx-auto mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
                      </svg>
                      <p className="text-slate-500">No hay source qualifiers configurados</p>
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* Transformations y Targets */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
              {/* Other Transformations */}
              <div className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md">
                <div className="flex items-center space-x-3 mb-6">
                  <div className="w-10 h-10 bg-gradient-to-br from-yellow-500 to-orange-600 rounded-lg flex items-center justify-center">
                    <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-lg font-bold text-slate-900">Transformations</h3>
                    <p className="text-sm text-slate-600">{otherTransformations.length} transformaciones</p>
                  </div>
                </div>
                
                <div className="space-y-4 max-h-96 overflow-y-auto">
                  {otherTransformations.map((trans, index) => (
                    <div
                      key={index}
                      className="bg-gradient-to-r from-yellow-50 to-orange-50 border border-yellow-200/60 rounded-xl p-4 hover:shadow-md transition-all duration-200"
                    >
                      <div className="flex items-start justify-between">
                        <h4 className="font-semibold text-yellow-900 text-base">{trans.name}</h4>
                        <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                          {trans.type}
                        </span>
                      </div>
                    </div>
                  ))}
                  
                  {otherTransformations.length === 0 && (
                    <div className="text-center py-8">
                      <svg className="w-12 h-12 text-slate-400 mx-auto mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      </svg>
                      <p className="text-slate-500">No hay transformaciones configuradas</p>
                    </div>
                  )}
                </div>
              </div>

              {/* Targets */}
              <div className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md">
                <div className="flex items-center space-x-3 mb-6">
                  <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-600 rounded-lg flex items-center justify-center">
                    <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-lg font-bold text-slate-900">Targets</h3>
                    <p className="text-sm text-slate-600">{targets.length} destinos de datos</p>
                  </div>
                </div>
                
                <div className="space-y-4">
                  {targets.map((target, index) => (
                    <div
                      key={index}
                      className="bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200/60 rounded-xl p-4 hover:shadow-md transition-all duration-200"
                    >
                      <div className="flex items-start justify-between mb-3">
                        <h4 className="font-semibold text-purple-900 text-base">
                          {target.transformationName}
                        </h4>
                        <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                          {target.transformationType}
                        </span>
                      </div>
                      
                      {/* Display SQL attributes with syntax highlighting */}
                      {(() => {
                        const preSqlAttr = target.attributes?.find(attr => attr.name === 'Pre SQL');
                        const postSqlAttr = target.attributes?.find(attr => attr.name === 'Post SQL');

                        return (
                          <div className="mt-3 space-y-3">
                            {preSqlAttr && preSqlAttr.value && preSqlAttr.value.trim() && (
                              <SqlCodeViewer
                                sql={preSqlAttr.value}
                                title="Pre-SQL"
                                type="pre"
                                maxHeight="200px"
                              />
                            )}
                            {postSqlAttr && postSqlAttr.value && postSqlAttr.value.trim() && (
                              <SqlCodeViewer
                                sql={postSqlAttr.value}
                                title="Post-SQL"
                                type="post"
                                maxHeight="200px"
                              />
                            )}
                          </div>
                        );
                      })()}
                    </div>
                  ))}
                  
                  {targets.length === 0 && (
                    <div className="text-center py-8">
                      <svg className="w-12 h-12 text-slate-400 mx-auto mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
                      </svg>
                      <p className="text-slate-500">No hay targets configurados</p>
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* SQL Commands Section */}
            <div className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md">
              <div className="flex items-center space-x-3 mb-6">
                <div className="w-10 h-10 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-lg flex items-center justify-center">
                  <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                </div>
                <div>
                  <h3 className="text-lg font-bold text-slate-900">SQL Commands</h3>
                  <p className="text-sm text-slate-600">Comandos SQL asociados al mapping</p>
                </div>
              </div>

              {/* Find SQL commands from targets associated with this mapping */}
              {(() => {
                const mappingTargets = data?.targets?.filter(target =>
                  mapping.instances.some(instance =>
                    instance.type === "TARGET" && instance.transformationName === target.name
                  )
                ) || [];

                const sqlCommands: { preSql: string; postSql: string; targetName: string }[] = [];

                mappingTargets.forEach(target => {
                  const preSqlAttr = target.attributes?.find(attr => attr.name === "Pre SQL");
                  const postSqlAttr = target.attributes?.find(attr => attr.name === "Post SQL");

                  if ((preSqlAttr?.value && preSqlAttr.value.trim()) ||
                      (postSqlAttr?.value && postSqlAttr.value.trim())) {
                    sqlCommands.push({
                      preSql: preSqlAttr?.value || "",
                      postSql: postSqlAttr?.value || "",
                      targetName: target.name
                    });
                  }
                });

                if (sqlCommands.length === 0) {
                  return (
                    <div className="text-center py-12">
                      <div className="w-16 h-16 bg-gradient-to-br from-slate-100 to-slate-200 rounded-2xl flex items-center justify-center mx-auto mb-4">
                        <svg className="w-8 h-8 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                      </div>
                      <h4 className="text-lg font-semibold text-slate-700 mb-2">No hay comandos SQL definidos</h4>
                      <p className="text-slate-500 max-w-md mx-auto">
                        Los comandos Pre-SQL y Post-SQL son opcionales y se ejecutan en las tablas de destino
                      </p>
                    </div>
                  );
                }

                return (
                  <div className="space-y-6">
                    {sqlCommands.map((sql, index) => (
                      <div key={index} className="bg-gradient-to-r from-indigo-50 to-purple-50 border border-indigo-200/60 rounded-xl p-6">
                        <div className="flex items-center space-x-3 mb-6">
                          <div className="w-8 h-8 bg-indigo-500 rounded-lg flex items-center justify-center">
                            <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
                            </svg>
                          </div>
                          <h4 className="text-lg font-semibold text-indigo-900">
                            Target: {sql.targetName}
                          </h4>
                        </div>
                        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                          <SqlCodeViewer
                            sql={sql.preSql}
                            title="Pre-SQL Command"
                            type="pre"
                            maxHeight="300px"
                          />
                          <SqlCodeViewer
                            sql={sql.postSql}
                            title="Post-SQL Command"
                            type="post"
                            maxHeight="300px"
                          />
                        </div>
                      </div>
                    ))}
                  </div>
                );
              })()}
            </div>
          </>
        );
      case "workflows":
        const workflow = object as IMappedWorkflow;
        return (
          <>
            {/* Header del Workflow */}
            <div className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md mb-8">
              <div className="flex items-start justify-between mb-6">
                <div className="flex items-center space-x-4">
                  <div className="w-12 h-12 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-xl flex items-center justify-center shadow-lg">
                    <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                    </svg>
                  </div>
                  <div>
                    <h1 className="text-2xl font-bold text-slate-900">{workflow.name}</h1>
                    <p className="text-slate-600 mt-1">Workflow de procesamiento</p>
                  </div>
                </div>
                <div className="flex items-center space-x-3">
                  <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                    workflow.isValid === "YES" 
                      ? "bg-green-100 text-green-800" 
                      : "bg-red-100 text-red-800"
                  }`}>
                    <div className={`w-2 h-2 rounded-full mr-2 ${
                      workflow.isValid === "YES" ? "bg-green-400" : "bg-red-400"
                    }`}></div>
                    {workflow.isValid === "YES" ? "V√°lido" : "Inv√°lido"}
                  </span>
                  <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                    workflow.isEnabled === "YES" 
                      ? "bg-blue-100 text-blue-800" 
                      : "bg-gray-100 text-gray-800"
                  }`}>
                    <div className={`w-2 h-2 rounded-full mr-2 ${
                      workflow.isEnabled === "YES" ? "bg-blue-400" : "bg-gray-400"
                    }`}></div>
                    {workflow.isEnabled === "YES" ? "Habilitado" : "Deshabilitado"}
                  </span>
                  <Button
                    onClick={() => navigate(-1)}
                    variant="ghost"
                    size="sm"
                    icon={
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                      </svg>
                    }
                  >
                    Volver
                  </Button>
                </div>
              </div>

              {/* Informaci√≥n b√°sica y estad√≠sticas */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <div className="bg-gradient-to-br from-purple-50 to-purple-100 rounded-xl p-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-purple-500 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                      </svg>
                    </div>
                    <div>
                      <p className="text-sm text-purple-600 font-medium">Tasks</p>
                      <p className="text-xl font-bold text-purple-900">{workflow.tasks.length}</p>
                    </div>
                  </div>
                </div>

                <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl p-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                      </svg>
                    </div>
                    <div>
                      <p className="text-sm text-blue-600 font-medium">Links</p>
                      <p className="text-xl font-bold text-blue-900">{workflow.links.length}</p>
                    </div>
                  </div>
                </div>

                <div className="bg-gradient-to-br from-green-50 to-green-100 rounded-xl p-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-green-500 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM7 3H5a2 2 0 00-2 2v12a4 4 0 004 4h2a2 2 0 002-2V5a2 2 0 00-2-2z" />
                      </svg>
                    </div>
                    <div>
                      <p className="text-sm text-green-600 font-medium">Variables</p>
                      <p className="text-xl font-bold text-green-900">{workflow.variables.length}</p>
                    </div>
                  </div>
                </div>

                <div className="bg-gradient-to-br from-orange-50 to-orange-100 rounded-xl p-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-orange-500 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2" />
                      </svg>
                    </div>
                    <div>
                      <p className="text-sm text-orange-600 font-medium">Servidor</p>
                      <p className="text-sm font-bold text-orange-900 truncate">{workflow.serverName}</p>
                    </div>
                  </div>
                </div>
              </div>

              {workflow.description && (
                <div className="mt-6 p-4 bg-slate-50 rounded-xl">
                  <h4 className="text-sm font-semibold text-slate-700 mb-2">Descripci√≥n</h4>
                  <p className="text-slate-600">{workflow.description}</p>
                </div>
              )}
            </div>

            {/* Tasks Section */}
            {dependencies.length > 0 && (
              <div className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md">
                <div className="flex items-center space-x-3 mb-6">
                  <div className="w-10 h-10 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-lg flex items-center justify-center">
                    <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-lg font-bold text-slate-900">Tasks</h3>
                    <p className="text-sm text-slate-600">{dependencies.length} tareas configuradas</p>
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {dependencies.map((dep, index) => (
                    <div key={index} className="bg-gradient-to-r from-indigo-50 to-purple-50 border border-indigo-200/60 rounded-xl p-4 hover:shadow-md transition-all duration-200">
                      <div className="flex items-center space-x-3">
                        <div className="w-8 h-8 bg-indigo-500 rounded-lg flex items-center justify-center">
                          <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                        </div>
                        <span className="text-sm font-medium text-indigo-900">{dep}</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </>
        );
      case "sessions":
        const session = object as IMappedSession;
        return (
          <>
            {/* Header de la Session */}
            <div className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md mb-8">
              <div className="flex items-start justify-between mb-6">
                <div className="flex items-center space-x-4">
                  <div className="w-12 h-12 bg-gradient-to-br from-emerald-500 to-teal-600 rounded-xl flex items-center justify-center shadow-lg">
                    <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <div>
                    <h1 className="text-2xl font-bold text-slate-900">{session.name}</h1>
                    <p className="text-slate-600 mt-1">Sesi√≥n de procesamiento</p>
                  </div>
                </div>
                <div className="flex items-center space-x-3">
                  <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                    session.isValid === "YES" 
                      ? "bg-green-100 text-green-800" 
                      : "bg-red-100 text-red-800"
                  }`}>
                    <div className={`w-2 h-2 rounded-full mr-2 ${
                      session.isValid === "YES" ? "bg-green-400" : "bg-red-400"
                    }`}></div>
                    {session.isValid === "YES" ? "V√°lida" : "Inv√°lida"}
                  </span>
                  <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                    session.reusable === "YES" 
                      ? "bg-blue-100 text-blue-800" 
                      : "bg-gray-100 text-gray-800"
                  }`}>
                    <div className={`w-2 h-2 rounded-full mr-2 ${
                      session.reusable === "YES" ? "bg-blue-400" : "bg-gray-400"
                    }`}></div>
                    {session.reusable === "YES" ? "Reutilizable" : "No reutilizable"}
                  </span>
                  <Button
                    onClick={() => navigate(-1)}
                    variant="ghost"
                    size="sm"
                    icon={
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                      </svg>
                    }
                  >
                    Volver
                  </Button>
                </div>
              </div>

              {/* Informaci√≥n de configuraci√≥n */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="bg-gradient-to-br from-emerald-50 to-emerald-100 rounded-xl p-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-emerald-500 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
                      </svg>
                    </div>
                    <div>
                      <p className="text-sm text-emerald-600 font-medium">Mapping</p>
                      <p className="text-sm font-bold text-emerald-900 truncate">{session.mappingName}</p>
                    </div>
                  </div>
                </div>

                <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl p-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      </svg>
                    </div>
                    <div>
                      <p className="text-sm text-blue-600 font-medium">Config Reference</p>
                      <p className="text-sm font-bold text-blue-900 truncate">{session.configReferenceName}</p>
                    </div>
                  </div>
                </div>

                <div className="bg-gradient-to-br from-purple-50 to-purple-100 rounded-xl p-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-purple-500 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                      </svg>
                    </div>
                    <div>
                      <p className="text-sm text-purple-600 font-medium">Versi√≥n</p>
                      <p className="text-xl font-bold text-purple-900">{session.versionNumber}</p>
                    </div>
                  </div>
                </div>
              </div>

              {session.description && (
                <div className="mt-6 p-4 bg-slate-50 rounded-xl">
                  <h4 className="text-sm font-semibold text-slate-700 mb-2">Descripci√≥n</h4>
                  <p className="text-slate-600">{session.description}</p>
                </div>
              )}
            </div>

            {/* Dependencies Section */}
            {dependencies.length > 0 && (
              <div className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md">
                <div className="flex items-center space-x-3 mb-6">
                  <div className="w-10 h-10 bg-gradient-to-br from-orange-500 to-red-600 rounded-lg flex items-center justify-center">
                    <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-lg font-bold text-slate-900">Dependencias</h3>
                    <p className="text-sm text-slate-600">{dependencies.length} dependencias configuradas</p>
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {dependencies.map((dep, index) => (
                    <div key={index} className="bg-gradient-to-r from-orange-50 to-red-50 border border-orange-200/60 rounded-xl p-4 hover:shadow-md transition-all duration-200">
                      <div className="flex items-center space-x-3">
                        <div className="w-8 h-8 bg-orange-500 rounded-lg flex items-center justify-center">
                          <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                        </div>
                        <span className="text-sm font-medium text-orange-900">{dep}</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </>
        );
      case "sources":
        const source = object as IMappedSource;
        return (
          <>
            {/* Header del Source */}
            <div className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md mb-8">
              <div className="flex items-start justify-between mb-6">
                <div className="flex items-center space-x-4">
                  <div className="w-12 h-12 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg">
                    <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4" />
                    </svg>
                  </div>
                  <div>
                    <h1 className="text-2xl font-bold text-slate-900">{source.name}</h1>
                    <p className="text-slate-600 mt-1">Fuente de datos</p>
                  </div>
                </div>
                <div className="flex items-center space-x-3">
                  <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                    source.isFlatFile 
                      ? "bg-orange-100 text-orange-800" 
                      : "bg-blue-100 text-blue-800"
                  }`}>
                    <div className={`w-2 h-2 rounded-full mr-2 ${
                      source.isFlatFile ? "bg-orange-400" : "bg-blue-400"
                    }`}></div>
                    {source.isFlatFile ? "Archivo Plano" : "Base de Datos"}
                  </span>
                  <Button
                    onClick={() => navigate(-1)}
                    variant="ghost"
                    size="sm"
                    icon={
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                      </svg>
                    }
                  >
                    Volver
                  </Button>
                </div>
              </div>

              {/* Informaci√≥n b√°sica */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <div className="bg-gradient-to-br from-cyan-50 to-cyan-100 rounded-xl p-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-cyan-500 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4" />
                      </svg>
                    </div>
                    <div>
                      <p className="text-sm text-cyan-600 font-medium">Tipo de BD</p>
                      <p className="text-sm font-bold text-cyan-900">{source.databaseType}</p>
                    </div>
                  </div>
                </div>

                <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl p-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                      </svg>
                    </div>
                    <div>
                      <p className="text-sm text-blue-600 font-medium">Propietario</p>
                      <p className="text-sm font-bold text-blue-900 truncate">{source.ownerName}</p>
                    </div>
                  </div>
                </div>

                <div className="bg-gradient-to-br from-green-50 to-green-100 rounded-xl p-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-green-500 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                      </svg>
                    </div>
                    <div>
                      <p className="text-sm text-green-600 font-medium">Total Campos</p>
                      <p className="text-xl font-bold text-green-900">{source.fields.length}</p>
                    </div>
                  </div>
                </div>

                <div className="bg-gradient-to-br from-purple-50 to-purple-100 rounded-xl p-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-purple-500 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                      </svg>
                    </div>
                    <div>
                      <p className="text-sm text-purple-600 font-medium">Tipo</p>
                      <p className="text-sm font-bold text-purple-900">{source.isFlatFile ? "Archivo" : "Tabla"}</p>
                    </div>
                  </div>
                </div>
              </div>

              {source.description && (
                <div className="mt-6 p-4 bg-slate-50 rounded-xl">
                  <h4 className="text-sm font-semibold text-slate-700 mb-2">Descripci√≥n</h4>
                  <p className="text-slate-600">{source.description}</p>
                </div>
              )}
            </div>

            {/* Fields Section */}
            {source.fields.length > 0 && (
              <div className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md">
                <div className="flex items-center space-x-3 mb-6">
                  <div className="w-10 h-10 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-lg flex items-center justify-center">
                    <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-lg font-bold text-slate-900">Campos</h3>
                    <p className="text-sm text-slate-600">{source.fields.length} campos definidos</p>
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {source.fields.slice(0, 12).map((field, index) => (
                    <div key={index} className="bg-gradient-to-r from-indigo-50 to-purple-50 border border-indigo-200/60 rounded-xl p-4 hover:shadow-md transition-all duration-200">
                      <div className="flex items-start space-x-3">
                        <div className="w-8 h-8 bg-indigo-500 rounded-lg flex items-center justify-center flex-shrink-0">
                          <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                          </svg>
                        </div>
                        <div className="min-w-0 flex-1">
                          <p className="text-sm font-medium text-indigo-900 truncate">{field.name}</p>
                          <p className="text-xs text-indigo-600 mt-1">{field.dataType}</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
                
                {source.fields.length > 12 && (
                  <div className="mt-4 p-4 bg-slate-50 rounded-xl text-center">
                    <p className="text-sm text-slate-600">
                      ... y {source.fields.length - 12} campos m√°s
                    </p>
                  </div>
                )}
              </div>
            )}
          </>
        );
      case "targets":
        const target = object as IMappedTarget;
        return (
          <>
            {/* Header del Target */}
            <div className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md mb-8">
              <div className="flex items-start justify-between mb-6">
                <div className="flex items-center space-x-4">
                  <div className="w-12 h-12 bg-gradient-to-br from-rose-500 to-pink-600 rounded-xl flex items-center justify-center shadow-lg">
                    <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16v2a2 2 0 01-2 2H5a2 2 0 01-2-2v-7a2 2 0 012-2h2m3-4H9a2 2 0 00-2 2v7a2 2 0 002 2h6a2 2 0 002-2V9a2 2 0 00-2-2h-2m-3-4l3 3m0 0l-3 3m3-3H9" />
                    </svg>
                  </div>
                  <div>
                    <h1 className="text-2xl font-bold text-slate-900">{target.name}</h1>
                    <p className="text-slate-600 mt-1">Destino de datos</p>
                  </div>
                </div>
                <div className="flex items-center space-x-3">
                  <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-rose-100 text-rose-800">
                    <div className="w-2 h-2 rounded-full mr-2 bg-rose-400"></div>
                    Target
                  </span>
                  <Button
                    onClick={() => navigate(-1)}
                    variant="ghost"
                    size="sm"
                    icon={
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                      </svg>
                    }
                  >
                    Volver
                  </Button>
                </div>
              </div>

              {/* Informaci√≥n b√°sica */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <div className="bg-gradient-to-br from-rose-50 to-rose-100 rounded-xl p-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-rose-500 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4" />
                      </svg>
                    </div>
                    <div>
                      <p className="text-sm text-rose-600 font-medium">Tipo de BD</p>
                      <p className="text-sm font-bold text-rose-900">{target.databaseType}</p>
                    </div>
                  </div>
                </div>

                <div className="bg-gradient-to-br from-pink-50 to-pink-100 rounded-xl p-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-pink-500 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                      </svg>
                    </div>
                    <div>
                      <p className="text-sm text-pink-600 font-medium">Total Campos</p>
                      <p className="text-xl font-bold text-pink-900">{target.fields.length}</p>
                    </div>
                  </div>
                </div>

                <div className="bg-gradient-to-br from-purple-50 to-purple-100 rounded-xl p-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-purple-500 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16v2a2 2 0 01-2 2H5a2 2 0 01-2-2v-7a2 2 0 012-2h2m3-4H9a2 2 0 00-2 2v7a2 2 0 002 2h6a2 2 0 002-2V9a2 2 0 00-2-2h-2m-3-4l3 3m0 0l-3 3m3-3H9" />
                      </svg>
                    </div>
                    <div>
                      <p className="text-sm text-purple-600 font-medium">Tipo</p>
                      <p className="text-sm font-bold text-purple-900">Tabla Destino</p>
                    </div>
                  </div>
                </div>
              </div>

              {target.description && (
                <div className="mt-6 p-4 bg-slate-50 rounded-xl">
                  <h4 className="text-sm font-semibold text-slate-700 mb-2">Descripci√≥n</h4>
                  <p className="text-slate-600">{target.description}</p>
                </div>
              )}
            </div>

            {/* Fields Section */}
            {target.fields.length > 0 && (
              <div className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md">
                <div className="flex items-center space-x-3 mb-6">
                  <div className="w-10 h-10 bg-gradient-to-br from-rose-500 to-pink-600 rounded-lg flex items-center justify-center">
                    <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-lg font-bold text-slate-900">Campos</h3>
                    <p className="text-sm text-slate-600">{target.fields.length} campos definidos</p>
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {target.fields.slice(0, 12).map((field, index) => (
                    <div key={index} className="bg-gradient-to-r from-rose-50 to-pink-50 border border-rose-200/60 rounded-xl p-4 hover:shadow-md transition-all duration-200">
                      <div className="flex items-start space-x-3">
                        <div className="w-8 h-8 bg-rose-500 rounded-lg flex items-center justify-center flex-shrink-0">
                          <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                          </svg>
                        </div>
                        <div className="min-w-0 flex-1">
                          <p className="text-sm font-medium text-rose-900 truncate">{field.name}</p>
                          <p className="text-xs text-rose-600 mt-1">{field.dataType}</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
                
                {target.fields.length > 12 && (
                  <div className="mt-4 p-4 bg-slate-50 rounded-xl text-center">
                    <p className="text-sm text-slate-600">
                      ... y {target.fields.length - 12} campos m√°s
                    </p>
                  </div>
                )}
              </div>
            )}
          </>
        );
      default:
        return (
          <div className="bg-white rounded-2xl border border-slate-200/60 p-8 shadow-md text-center">
            <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z" />
              </svg>
            </div>
            <h3 className="text-lg font-semibold text-gray-900 mb-2">Tipo de objeto no soportado</h3>
            <p className="text-gray-600">El tipo de objeto "{objectType}" no est√° soportado actualmente.</p>
          </div>
        );
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100">
      <div className="mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {renderObjectDetails()}
      </div>
    </div>
  );
};

export default Details;


--------------------------------------------------------------------------------

// src/pages/Sessions.tsx

import { Link } from "react-router-dom";
import { useAppData } from "../components/layout/MainLayout";
import { Card } from "../components/ui/Card";

const Sessions = () => {
  const { data, searchTerm } = useAppData();

  const filteredSessions = data?.sessions?.filter((session) =>
    session.name?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const totalSessions = data?.sessions?.length || 0;
  const validSessions = data?.sessions?.filter(s => s.isValid === "YES").length || 0;
  const reusableSessions = data?.sessions?.filter(s => s.reusable === "YES").length || 0;
  const invalidSessions = totalSessions - validSessions;

  return (
    <div className="space-y-8">
      {/* Header Section */}
      <div className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md">
        <div className="flex items-center space-x-4 mb-6">
          <div className="w-12 h-12 bg-gradient-to-br from-teal-500 to-cyan-600 rounded-xl flex items-center justify-center shadow-lg">
            <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4" />
            </svg>
          </div>
          <div>
            <h1 className="text-2xl font-bold text-slate-900">Sessions</h1>
            <p className="text-slate-600">Gesti√≥n de sesiones de ejecuci√≥n</p>
          </div>
        </div>

        {/* Statistics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div className="bg-gradient-to-br from-teal-50 to-teal-100 rounded-xl p-4">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-teal-500 rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4" />
                </svg>
              </div>
              <div>
                <p className="text-sm text-teal-600 font-medium">Total</p>
                <p className="text-2xl font-bold text-teal-900">{totalSessions}</p>
              </div>
            </div>
          </div>

          <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl p-4">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div>
                <p className="text-sm text-blue-600 font-medium">V√°lidas</p>
                <p className="text-2xl font-bold text-blue-900">{validSessions}</p>
              </div>
            </div>
          </div>

          <div className="bg-gradient-to-br from-cyan-50 to-cyan-100 rounded-xl p-4">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-cyan-500 rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
              </div>
              <div>
                <p className="text-sm text-cyan-600 font-medium">Reutilizables a</p>
                <p className="text-2xl font-bold text-cyan-900">{reusableSessions}</p>
              </div>
            </div>
          </div>

          <div className="bg-gradient-to-br from-red-50 to-red-100 rounded-xl p-4">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-red-500 rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div>
                <p className="text-sm text-red-600 font-medium">Inv√°lidas</p>
                <p className="text-2xl font-bold text-red-900">{invalidSessions}</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Sessions Grid */}
      <div className="space-y-6">
        {searchTerm && (
          <div className="bg-teal-50 border border-teal-200 rounded-xl p-4">
            <div className="flex items-center space-x-2">
              <svg className="w-5 h-5 text-teal-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
              <p className="text-teal-800">
                Mostrando resultados para: <span className="font-semibold">"{searchTerm}"</span>
              </p>
              {filteredSessions && (
                <span className="text-teal-600">({filteredSessions.length} encontradas)</span>
              )}
            </div>
          </div>
        )}

        {filteredSessions && filteredSessions.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredSessions.map((session) => {
              const mappedMapping = data?.mappings.find(
                (m) => m.name === session.mappingName
              );

              const sourceNames =
                mappedMapping?.instances
                  .filter((inst) => inst.type === "SOURCE")
                  .map((inst) => inst.name) || [];
              const targetNames =
                mappedMapping?.instances
                  .filter((inst) => inst.type === "TARGET")
                  .map((inst) => inst.name) || [];
              const transformationNames =
                mappedMapping?.instances
                  .filter((inst) => inst.type === "TRANSFORMATION")
                  .map((inst) => `${inst.name} (${inst.transformationType})`) ||
                [];

              return (
                <div
                  key={session.name}
                  className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md hover:shadow-lg transition-all duration-200 group"
                >
                  <div className="flex items-start justify-between mb-2">
                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-gradient-to-br from-teal-500 to-cyan-600 rounded-lg flex items-center justify-center group-hover:scale-110 transition-transform duration-200">
                        <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4" />
                        </svg>
                      </div>
                      <div>
                        <h3 className="text-sm font-bold text-slate-900 group-hover:text-teal-600 transition-colors duration-200">
                          {session.name}
                        </h3>
                        <p className="text-sm text-slate-600">Session</p>
                      </div>
                    </div>
                    <div className="flex flex-col space-y-1">
                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                        session.isValid === "YES" 
                          ? "bg-blue-100 text-blue-800" 
                          : "bg-red-100 text-red-800"
                      }`}>
                        <div className={`w-1.5 h-1.5 rounded-full mr-1 ${
                          session.isValid === "YES" ? "bg-blue-400" : "bg-red-400"
                        }`}></div>
                        {session.isValid === "YES" ? "V√°lida" : "Inv√°lida"}
                      </span>
                      {session.reusable && (
                        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                          session.reusable === "YES" 
                            ? "bg-cyan-100 text-cyan-800" 
                            : "bg-gray-100 text-gray-800"
                        }`}>
                          <div className={`w-1.5 h-1.5 rounded-full mr-1 ${
                            session.reusable === "YES" ? "bg-cyan-400" : "bg-gray-400"
                          }`}></div>
                          {session.reusable === "YES" ? "Reutilizable" : "No reutilizable"}
                        </span>
                      )}
                    </div>
                  </div>

                  <div className="space-y-3 mb-4">
                    <div className="p-3 bg-slate-50 rounded-lg">
                      <p className="text-xs text-slate-500 mb-1">Mapping asociado</p>
                      <p className="text-sm text-slate-700 font-medium">{session.mappingName}</p>
                    </div>
                    
                    <div className="grid grid-cols-3 gap-2 text-xs">
                      <div className="bg-blue-50 rounded-lg p-2 text-center">
                        <p className="text-blue-600 font-medium">Sources</p>
                        <p className="text-blue-900 font-bold">{sourceNames.length}</p>
                      </div>
                      <div className="bg-green-50 rounded-lg p-2 text-center">
                        <p className="text-green-600 font-medium">Targets</p>
                        <p className="text-green-900 font-bold">{targetNames.length}</p>
                      </div>
                      <div className="bg-purple-50 rounded-lg p-2 text-center">
                        <p className="text-purple-600 font-medium">Transf.</p>
                        <p className="text-purple-900 font-bold">{transformationNames.length}</p>
                      </div>
                    </div>

                    {sourceNames.length > 0 && (
                      <div className="p-3 bg-blue-50 rounded-lg">
                        <p className="text-xs text-blue-600 font-medium mb-1">Sources ({sourceNames.length})</p>
                        <p className="text-sm text-blue-800">
                          {sourceNames.slice(0, 2).join(", ")}
                          {sourceNames.length > 2 ? "..." : ""}
                        </p>
                      </div>
                    )}

                    {targetNames.length > 0 && (
                      <div className="p-3 bg-green-50 rounded-lg">
                        <p className="text-xs text-green-600 font-medium mb-1">Targets ({targetNames.length})</p>
                        <p className="text-sm text-green-800">
                          {targetNames.slice(0, 2).join(", ")}
                          {targetNames.length > 2 ? "..." : ""}
                        </p>
                      </div>
                    )}
                  </div>

                  <Link
                    title=""
                    to={`/powercenter/sessions/${session.name}`}
                  >
                    <div className="w-full bg-gradient-to-r from-teal-500 to-cyan-600 text-white rounded-lg p-3 text-center font-medium hover:from-teal-600 hover:to-cyan-700 transition-all duration-200">
                      Ver Detalles
                    </div>
                  </Link>
                </div>
              );
            })}
          </div>
        ) : (
          <div className="bg-white rounded-2xl border border-slate-200/60 p-12 shadow-md text-center">
            <div className="w-16 h-16 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg className="w-8 h-8 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4" />
              </svg>
            </div>
            <h3 className="text-lg font-semibold text-slate-900 mb-2">
              {searchTerm ? "No se encontraron sesiones" : "No hay sesiones disponibles"}
            </h3>
            <p className="text-slate-600">
              {searchTerm 
                ? `No se encontraron sesiones que coincidan con "${searchTerm}"`
                : "No hay sesiones configuradas en el sistema"
              }
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default Sessions;


--------------------------------------------------------------------------------

// src/pages/Targets.tsx

import { useAppData } from "../components/layout/MainLayout";
import { Card } from "../components/ui/Card";

const Targets = () => {
  const { data, searchTerm } = useAppData();

  const filteredTargets = data?.targets?.filter((target) =>
    target.name?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const totalTargets = data?.targets?.length || 0;
  const targetsWithFields = data?.targets?.filter(t => t.fields && t.fields.length > 0).length || 0;
  const targetsWithDescription = data?.targets?.filter(t => t.description).length || 0;
  const uniqueDatabaseTypes = new Set(data?.targets?.map(t => t.databaseType)).size || 0;

  // Function to find dependencies for a target
  const getTargetDependencies = (targetName: string) => {
    const dependencies: {
      type: string;
      name: string;
      mapping?: string;
      workflow?: string;
    }[] = [];
    const seen = new Set<string>();

    // Find mappings that use this target
    const relatedMappings =
      data?.mappings?.filter((mapping) =>
        mapping.instances?.some(
          (instance) =>
            instance.type === "TARGET" &&
            instance.transformationName === targetName
        )
      ) || [];

    relatedMappings.forEach((mapping) => {
      const mappingKey = `Mapping:${mapping.name}`;
      if (!seen.has(mappingKey)) {
        seen.add(mappingKey);
        dependencies.push({
          type: "Mapping",
          name: mapping.name,
        });
      }

      // Find sessions that use this mapping
      const relatedSessions =
        data?.sessions?.filter(
          (session) => session.mappingName === mapping.name
        ) || [];

      relatedSessions.forEach((session) => {
        const sessionKey = `Session:${session.name}`;
        if (!seen.has(sessionKey)) {
          seen.add(sessionKey);
          dependencies.push({
            type: "Session",
            name: session.name,
            mapping: mapping.name,
          });
        }

        // Find workflows that contain this session
        const relatedWorkflows =
          data?.workflows?.filter((workflow) =>
            workflow.tasks?.some((task) => task.taskName === session.name)
          ) || [];

        relatedWorkflows.forEach((workflow) => {
          const workflowKey = `Workflow:${workflow.name}`;
          if (!seen.has(workflowKey)) {
            seen.add(workflowKey);
            dependencies.push({
              type: "Workflow",
              name: workflow.name,
              mapping: mapping.name,
            });
          }
        });
      });
    });

    return dependencies;
  };

  return (
    <div className="space-y-8">
      {/* Header Section */}
      <div className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md">
        <div className="flex items-center space-x-4 mb-6">
          <div className="w-12 h-12 bg-gradient-to-br from-red-500 to-pink-600 rounded-xl flex items-center justify-center shadow-lg">
            <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
            </svg>
          </div>
          <div>
            <h1 className="text-2xl font-bold text-slate-900">Targets</h1>
            <p className="text-slate-600">Gesti√≥n de destinos de datos y dependencias</p>
          </div>
        </div>

        {/* Statistics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div className="bg-gradient-to-br from-red-50 to-red-100 rounded-xl p-4">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-red-500 rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
                </svg>
              </div>
              <div>
                <p className="text-sm text-red-600 font-medium">Total</p>
                <p className="text-2xl font-bold text-red-900">{totalTargets}</p>
              </div>
            </div>
          </div>

          <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl p-4">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                </svg>
              </div>
              <div>
                <p className="text-sm text-blue-600 font-medium">Con Campos</p>
                <p className="text-2xl font-bold text-blue-900">{targetsWithFields}</p>
              </div>
            </div>
          </div>

          <div className="bg-gradient-to-br from-green-50 to-green-100 rounded-xl p-4">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-green-500 rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
              </div>
              <div>
                <p className="text-sm text-green-600 font-medium">Con Descripci√≥n</p>
                <p className="text-2xl font-bold text-green-900">{targetsWithDescription}</p>
              </div>
            </div>
          </div>

          <div className="bg-gradient-to-br from-purple-50 to-purple-100 rounded-xl p-4">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-purple-500 rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2" />
                </svg>
              </div>
              <div>
                <p className="text-sm text-purple-600 font-medium">Tipos de BD</p>
                <p className="text-2xl font-bold text-purple-900">{uniqueDatabaseTypes}</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Targets Grid */}
      <div className="space-y-6">
        {searchTerm && (
          <div className="bg-red-50 border border-red-200 rounded-xl p-4">
            <div className="flex items-center space-x-2">
              <svg className="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
              <p className="text-red-800">
                Mostrando resultados para: <span className="font-semibold">"{searchTerm}"</span>
              </p>
              {filteredTargets && (
                <span className="text-red-600">({filteredTargets.length} encontrados)</span>
              )}
            </div>
          </div>
        )}

        {filteredTargets && filteredTargets.length > 0 ? (
          <div className="space-y-6">
            {filteredTargets.map((target) => {
              const dependencies = getTargetDependencies(target.name);

              return (
                <div key={target.name} className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md hover:shadow-lg transition-all duration-200">
                  <div className="flex flex-col lg:flex-row gap-6">
                    {/* Left side: Target Card */}
                    <div className="lg:w-1/3">
                      <div className="bg-gradient-to-br from-red-50 to-pink-50 rounded-xl p-6 h-full">
                        <div className="flex items-center space-x-3 mb-4">
                          <div className="w-10 h-10 bg-gradient-to-br from-red-500 to-pink-600 rounded-lg flex items-center justify-center">
                            <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
                            </svg>
                          </div>
                          <div>
                            <h3 className="text-lg font-bold text-slate-900">{target.name}</h3>
                            <p className="text-sm text-slate-600">Target</p>
                          </div>
                        </div>

                        <div className="space-y-3 mb-4">
                          <div className="flex items-center justify-between">
                            <span className="text-sm text-slate-600">Tipo:</span>
                            <span className="text-sm font-medium text-slate-900">{target.databaseType}</span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-sm text-slate-600">Campos:</span>
                            <span className="text-sm font-medium text-slate-900">{target.fields?.length || 0}</span>
                          </div>
                        </div>

                        {target.description && (
                          <div className="p-3 bg-white rounded-lg mb-4">
                            <p className="text-xs text-slate-500 mb-1">Descripci√≥n</p>
                            <p className="text-sm text-slate-700">{target.description}</p>
                          </div>
                        )}

                        <Card
                          title=""
                          to={`/powercenter/targets/${target.name}`}
                          titleClassName="!p-0 !border-0 !shadow-none !bg-transparent"
                        >
                          <div className="w-full bg-gradient-to-r from-red-500 to-pink-600 text-white rounded-lg p-3 text-center font-medium hover:from-red-600 hover:to-pink-700 transition-all duration-200">
                            Ver Detalles
                          </div>
                        </Card>
                      </div>
                    </div>

                    {/* Right side: Dependencies */}
                    <div className="lg:w-2/3">
                      <div className="mb-4">
                        <h4 className="text-lg font-semibold text-slate-900 mb-2">Dependencias</h4>
                        <p className="text-sm text-slate-600">Mappings, sessions y workflows que utilizan este target</p>
                      </div>

                      {dependencies.length > 0 ? (
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                          {/* Column 1: Mappings */}
                          <div className="bg-blue-50 rounded-xl p-4">
                            <div className="flex items-center space-x-2 mb-3">
                              <div className="w-6 h-6 bg-blue-500 rounded-lg flex items-center justify-center">
                                <svg className="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
                                </svg>
                              </div>
                              <h5 className="text-sm font-semibold text-blue-800">
                                Mappings ({dependencies.filter(dep => dep.type === 'Mapping').length})
                              </h5>
                            </div>
                            <div className="space-y-2 max-h-40 overflow-y-auto">
                              {dependencies.filter(dep => dep.type === 'Mapping').length > 0 ? (
                                dependencies.filter(dep => dep.type === 'Mapping').map((dep, index) => (
                                  <div key={index} className="bg-white rounded-lg p-3 border border-blue-200">
                                    <div className="flex items-center justify-between">
                                      <p className="font-medium text-sm text-slate-900 truncate">{dep.name}</p>
                                      <button
                                        onClick={() => window.open(`/powercenter/mappings/${dep.name}`, '_blank')}
                                        className="text-blue-600 hover:text-blue-800 text-xs font-medium px-2 py-1 rounded bg-blue-100 hover:bg-blue-200 transition-colors duration-200"
                                      >
                                        Ver
                                      </button>
                                    </div>
                                  </div>
                                ))
                              ) : (
                                <div className="text-center py-4">
                                  <p className="text-blue-600 text-sm">Sin mappings</p>
                                </div>
                              )}
                            </div>
                          </div>

                          {/* Column 2: Sessions */}
                          <div className="bg-green-50 rounded-xl p-4">
                            <div className="flex items-center space-x-2 mb-3">
                              <div className="w-6 h-6 bg-green-500 rounded-lg flex items-center justify-center">
                                <svg className="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4" />
                                </svg>
                              </div>
                              <h5 className="text-sm font-semibold text-green-800">
                                Sessions ({dependencies.filter(dep => dep.type === 'Session').length})
                              </h5>
                            </div>
                            <div className="space-y-2 max-h-40 overflow-y-auto">
                              {dependencies.filter(dep => dep.type === 'Session').length > 0 ? (
                                dependencies.filter(dep => dep.type === 'Session').map((dep, index) => (
                                  <div key={index} className="bg-white rounded-lg p-3 border border-green-200">
                                    <div className="flex items-center justify-between">
                                      <div className="flex-1 min-w-0">
                                        <p className="font-medium text-sm text-slate-900 truncate">{dep.name}</p>
                                        <p className="text-xs text-green-600 truncate">Map: {dep.mapping}</p>
                                      </div>
                                      <button
                                        onClick={() => window.open(`/powercenter/sessions/${dep.name}`, '_blank')}
                                        className="text-green-600 hover:text-green-800 text-xs font-medium px-2 py-1 rounded bg-green-100 hover:bg-green-200 transition-colors duration-200 ml-2"
                                      >
                                        Ver
                                      </button>
                                    </div>
                                  </div>
                                ))
                              ) : (
                                <div className="text-center py-4">
                                  <p className="text-green-600 text-sm">Sin sessions</p>
                                </div>
                              )}
                            </div>
                          </div>

                          {/* Column 3: Workflows */}
                          <div className="bg-purple-50 rounded-xl p-4">
                            <div className="flex items-center space-x-2 mb-3">
                              <div className="w-6 h-6 bg-purple-500 rounded-lg flex items-center justify-center">
                                <svg className="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
                                </svg>
                              </div>
                              <h5 className="text-sm font-semibold text-purple-800">
                                Workflows ({dependencies.filter(dep => dep.type === 'Workflow').length})
                              </h5>
                            </div>
                            <div className="space-y-2 max-h-40 overflow-y-auto">
                              {dependencies.filter(dep => dep.type === 'Workflow').length > 0 ? (
                                dependencies.filter(dep => dep.type === 'Workflow').map((dep, index) => (
                                  <div key={index} className="bg-white rounded-lg p-3 border border-purple-200">
                                    <div className="flex items-center justify-between">
                                      <div className="flex-1 min-w-0">
                                        <p className="font-medium text-sm text-slate-900 truncate">{dep.name}</p>
                                        <p className="text-xs text-purple-600 truncate">Map: {dep.mapping}</p>
                                      </div>
                                      <button
                                        onClick={() => window.open(`/powercenter/workflows/${dep.name}`, '_blank')}
                                        className="text-purple-600 hover:text-purple-800 text-xs font-medium px-2 py-1 rounded bg-purple-100 hover:bg-purple-200 transition-colors duration-200 ml-2"
                                      >
                                        Ver
                                      </button>
                                    </div>
                                  </div>
                                ))
                              ) : (
                                <div className="text-center py-4">
                                  <p className="text-purple-600 text-sm">Sin workflows</p>
                                </div>
                              )}
                            </div>
                          </div>
                        </div>
                      ) : (
                        <div className="bg-slate-50 rounded-xl p-8 text-center">
                          <div className="w-12 h-12 bg-slate-200 rounded-full flex items-center justify-center mx-auto mb-3">
                            <svg className="w-6 h-6 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                            </svg>
                          </div>
                          <p className="text-slate-600 font-medium">No se encontraron dependencias</p>
                          <p className="text-slate-500 text-sm">Este target no est√° siendo utilizado por ning√∫n mapping, session o workflow</p>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        ) : (
          <div className="bg-white rounded-2xl border border-slate-200/60 p-12 shadow-md text-center">
            <div className="w-16 h-16 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg className="w-8 h-8 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
              </svg>
            </div>
            <h3 className="text-lg font-semibold text-slate-900 mb-2">
              {searchTerm ? "No se encontraron targets" : "No hay targets disponibles"}
            </h3>
            <p className="text-slate-600">
              {searchTerm 
                ? `No se encontraron targets que coincidan con "${searchTerm}"`
                : "No hay targets configurados en el sistema"
              }
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default Targets;


--------------------------------------------------------------------------------

// src/pages/Workflows.tsx

import { useAppData } from "../components/layout/MainLayout";
import { Card } from "../components/ui/Card";

const Workflows = () => {
  const { data, searchTerm } = useAppData();

  const filteredWorkflows = data?.workflows?.filter((workflow) =>
    workflow.name?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const totalWorkflows = data?.workflows?.length || 0;
  const validWorkflows = data?.workflows?.filter(w => w.isValid === "YES").length || 0;
  const enabledWorkflows = data?.workflows?.filter(w => w.isEnabled === "YES").length || 0;
  const invalidWorkflows = totalWorkflows - validWorkflows;

  return (
    <div className="space-y-8">
      {/* Header Section */}
      <div className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md">
        <div className="flex items-center space-x-4 mb-6">
          <div className="w-12 h-12 bg-gradient-to-br from-green-500 to-emerald-600 rounded-xl flex items-center justify-center shadow-lg">
            <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
            </svg>
          </div>
          <div>
            <h1 className="text-2xl font-bold text-slate-900">Workflows</h1>
            <p className="text-slate-600">Gesti√≥n de flujos de trabajo</p>
          </div>
        </div>

        {/* Statistics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div className="bg-gradient-to-br from-green-50 to-green-100 rounded-xl p-4">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-green-500 rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                </svg>
              </div>
              <div>
                <p className="text-sm text-green-600 font-medium">Total</p>
                <p className="text-2xl font-bold text-green-900">{totalWorkflows}</p>
              </div>
            </div>
          </div>

          <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl p-4">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div>
                <p className="text-sm text-blue-600 font-medium">V√°lidos</p>
                <p className="text-2xl font-bold text-blue-900">{validWorkflows}</p>
              </div>
            </div>
          </div>

          <div className="bg-gradient-to-br from-emerald-50 to-emerald-100 rounded-xl p-4">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-emerald-500 rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1.586a1 1 0 01.707.293l2.414 2.414a1 1 0 00.707.293H15M9 10v4a2 2 0 002 2h2a2 2 0 002-2v-4M9 10V9a2 2 0 012-2h2a2 2 0 012 2v1" />
                </svg>
              </div>
              <div>
                <p className="text-sm text-emerald-600 font-medium">Habilitados</p>
                <p className="text-2xl font-bold text-emerald-900">{enabledWorkflows}</p>
              </div>
            </div>
          </div>

          <div className="bg-gradient-to-br from-red-50 to-red-100 rounded-xl p-4">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-red-500 rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div>
                <p className="text-sm text-red-600 font-medium">Inv√°lidos</p>
                <p className="text-2xl font-bold text-red-900">{invalidWorkflows}</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Workflows Grid */}
      <div className="space-y-6">
        {searchTerm && (
          <div className="bg-green-50 border border-green-200 rounded-xl p-4">
            <div className="flex items-center space-x-2">
              <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
              <p className="text-green-800">
                Mostrando resultados para: <span className="font-semibold">"{searchTerm}"</span>
              </p>
              {filteredWorkflows && (
                <span className="text-green-600">({filteredWorkflows.length} encontrados)</span>
              )}
            </div>
          </div>
        )}

        {filteredWorkflows && filteredWorkflows.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredWorkflows.map((workflow) => (
              <div
                key={workflow.name}
                className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md hover:shadow-lg transition-all duration-200 group"
              >
                <div className="flex items-start justify-between mb-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-gradient-to-br from-green-500 to-emerald-600 rounded-lg flex items-center justify-center group-hover:scale-110 transition-transform duration-200">
                      <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                      </svg>
                    </div>
                    <div>
                      <h3 className="text-lg font-bold text-slate-900 group-hover:text-green-600 transition-colors duration-200">
                        {workflow.name}
                      </h3>
                      <p className="text-sm text-slate-600">Workflow</p>
                    </div>
                  </div>
                  <div className="flex flex-col space-y-1">
                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                      workflow.isValid === "YES" 
                        ? "bg-blue-100 text-blue-800" 
                        : "bg-red-100 text-red-800"
                    }`}>
                      <div className={`w-1.5 h-1.5 rounded-full mr-1 ${
                        workflow.isValid === "YES" ? "bg-blue-400" : "bg-red-400"
                      }`}></div>
                      {workflow.isValid === "YES" ? "V√°lido" : "Inv√°lido"}
                    </span>
                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                      workflow.isEnabled === "YES" 
                        ? "bg-emerald-100 text-emerald-800" 
                        : "bg-gray-100 text-gray-800"
                    }`}>
                      <div className={`w-1.5 h-1.5 rounded-full mr-1 ${
                        workflow.isEnabled === "YES" ? "bg-emerald-400" : "bg-gray-400"
                      }`}></div>
                      {workflow.isEnabled === "YES" ? "Habilitado" : "Deshabilitado"}
                    </span>
                  </div>
                </div>

                <div className="space-y-3 mb-4">
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-slate-600">Tareas</span>
                    <span className="text-sm font-semibold text-slate-900">
                      {workflow.tasks?.length || 0}
                    </span>
                  </div>
                  
                  {workflow.attributes && workflow.attributes[0] && (
                    <div className="p-3 bg-slate-50 rounded-lg">
                      <p className="text-xs text-slate-500 mb-1">Archivo de par√°metros</p>
                      <p className="text-sm text-slate-700 font-mono truncate">
                        {workflow.attributes[0].value}
                      </p>
                    </div>
                  )}

                  {workflow.description && (
                    <div className="p-3 bg-slate-50 rounded-lg">
                      <p className="text-sm text-slate-600 line-clamp-2">{workflow.description}</p>
                    </div>
                  )}
                </div>

                <Card
                  title=""
                  to={`/powercenter/workflows/${workflow.name}`}
                  titleClassName="!p-0 !border-0 !shadow-none !bg-transparent"
                >
                  <div className="w-full bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-lg p-3 text-center font-medium hover:from-green-600 hover:to-emerald-700 transition-all duration-200">
                    Ver Detalles
                  </div>
                </Card>
              </div>
            ))}
          </div>
        ) : (
          <div className="bg-white rounded-2xl border border-slate-200/60 p-12 shadow-md text-center">
            <div className="w-16 h-16 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg className="w-8 h-8 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
              </svg>
            </div>
            <h3 className="text-lg font-semibold text-slate-900 mb-2">
              {searchTerm ? "No se encontraron workflows" : "No hay workflows disponibles"}
            </h3>
            <p className="text-slate-600">
              {searchTerm 
                ? `No se encontraron workflows que coincidan con "${searchTerm}"`
                : "No hay workflows configurados en el sistema"
              }
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default Workflows;


--------------------------------------------------------------------------------

// src/pages/Dashboard.tsx

// src/pages/Dashboard.tsx
import { DataTable } from "../components/common/DataTable";
import { KPICard } from "../components/dashboard/KPICard";
import MappingTypeChart from "../components/dashboard/MappingTypeChart";
import MappingGraph from "../components/mappings/MappingGraph";
import { useExtractionData } from "../hooks/useExtractionData";
import { Loader } from "../components/ui/Loader";

// Iconos para los KPIs
const WorkflowIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
  </svg>
);

const SessionIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
  </svg>
);

const MappingIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
  </svg>
);

const SourceIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
  </svg>
);

const TargetIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
  </svg>
);

export default function Dashboard() {
  const { data, loading, error } = useExtractionData();

  const mappings = data?.mappings ?? [];
  const s = data?.summary;

  const kpis = {
    workflows: s?.totalWorkflows ?? 0,
    sessions: s?.totalSessions ?? 0,
    mappings: s?.totalMappings ?? mappings.length,
    sources: s?.totalSources ?? 0,
    targets: s?.totalTargets ?? 0,
  };

  const mappingColumns = [
    { header: "Mapping", accessorKey: "name" },
    {
      header: "V√°lido",
      cell: ({ row }: any) => (
        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
          row.original?.isValid === "YES" 
            ? "bg-green-100 text-green-800" 
            : "bg-red-100 text-red-800"
        }`}>
          {row.original?.isValid === "YES" ? "S√≠" : "No"}
        </span>
      ),
    },
    {
      header: "#Transf.",
      cell: ({ row }: any) => (
        <span className="inline-flex items-center px-2 py-1 rounded-md text-sm font-medium bg-blue-100 text-blue-800">
          {row.original?.transformations?.length ?? 0}
        </span>
      ),
    },
    {
      header: "#Instancias",
      cell: ({ row }: any) => (
        <span className="inline-flex items-center px-2 py-1 rounded-md text-sm font-medium bg-purple-100 text-purple-800">
          {row.original?.instances?.length ?? 0}
        </span>
      ),
    },
  ];

  if (loading) return <Loader text="Cargando dashboard..." />;
  if (error) return (
    <div className="flex items-center justify-center h-64">
      <div className="text-center">
        <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <svg className="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
        <h3 className="text-lg font-semibold text-slate-900 mb-2">Error al cargar datos</h3>
        <p className="text-slate-600">{error}</p>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100">
      <div className="max-w-7xl mx-auto p-6 space-y-8">
        {/* Header Section */}
        <div className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md animate-fade-in">
          <div className="flex items-center space-x-4 mb-6">
            <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center shadow-lg animate-float">
              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
              </svg>
            </div>
            <div className="animate-slide-in">
              <h1 className="text-2xl font-bold text-slate-900">Dashboard PowerCenter</h1>
              <p className="text-slate-600">Resumen general del sistema ETL</p>
            </div>
          </div>

          {/* KPI Cards */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 stagger-children">
            <div className="card-hover">
              <KPICard
                title="Workflows"
                value={kpis.workflows}
                icon={<WorkflowIcon />}
                color="blue"
                description="Total de workflows"
              />
            </div>
            <div className="card-hover">
              <KPICard
                title="Sessions"
                value={kpis.sessions}
                icon={<SessionIcon />}
                color="green"
                description="Total de sessions"
              />
            </div>
            <div className="card-hover">
              <KPICard
                title="Mappings"
                value={kpis.mappings}
                icon={<MappingIcon />}
                color="purple"
                description="Total de mappings"
              />
            </div>
            <div className="card-hover">
              <KPICard
                title="Sources"
                value={kpis.sources}
                icon={<SourceIcon />}
                color="orange"
                description="Total de sources"
              />
            </div>
            <div className="card-hover">
              <KPICard
                title="Targets"
                value={kpis.targets}
                icon={<TargetIcon />}
                color="red"
                description="Total de targets"
              />
            </div>
          </div>
        </div>

        {/* Distribuci√≥n por tipo de transformaci√≥n */}
        <section className="space-y-4 animate-slide-up delay-200">
          <h2 className="text-xl font-semibold text-slate-800 flex items-center space-x-2">
            <svg className="w-6 h-6 text-purple-600 icon-bounce" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 3.055A9.001 9.001 0 1020.945 13H11V3.055z" />
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.488 9H15V3.512A9.025 9.025 0 0120.488 9z" />
            </svg>
            <span>Distribuci√≥n de Transformaciones</span>
          </h2>
          <div className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md hover:shadow-lg transition-all duration-300 card-hover">
            <MappingTypeChart mappings={mappings as any} />
          </div>
        </section>

        {/* Tabla comparativa de Mappings */}
        <section className="space-y-4 animate-slide-up delay-300">
          <h2 className="text-xl font-semibold text-slate-800 flex items-center space-x-2">
            <svg className="w-6 h-6 text-green-600 icon-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2h2a2 2 0 002-2z" />
            </svg>
            <span>Mappings Detallados</span>
          </h2>
          <div className="bg-white rounded-2xl border border-slate-200/60 shadow-md overflow-hidden hover:shadow-lg transition-all duration-300">
            <DataTable
              data={mappings as any}
              columns={mappingColumns as any}
              virtualized
              height={420}
            />
          </div>
        </section>

        {/* Grafo de un Mapping (ejemplo: el primero) */}
        {mappings[0] && (
          <section className="space-y-4 animate-slide-up delay-400">
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-semibold text-slate-800 flex items-center space-x-2">
                <svg className="w-6 h-6 text-indigo-600 icon-rotate" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                </svg>
                <span>Mapping: {mappings[0].name}</span>
              </h2>
              <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-indigo-100 text-indigo-800 animate-shimmer">
                Vista de demostraci√≥n
              </span>
            </div>
            <div className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md hover:shadow-lg transition-all duration-300 card-hover">
              <MappingGraph mapping={mappings[0] as any} />
            </div>
          </section>
        )}
      </div>
    </div>
  );
}


--------------------------------------------------------------------------------

// src/pages/Tools.tsx

import { useState } from "react";
import { Card } from "../components/ui/Card";
import  ExpressionValidator from "./ExpressionValidator";

// Placeholder components for each tool

const DependencySearcher = () => {
  return (
    <Card title="">
      AQUI DEBE HABER UNA LISTA DESPLEGABLE DE TODOS LOS OBJETOS DE POWER BI
      SOURCES Y TARGETS, CON OPCION PARA ESCRIBIR Y BUSCAR MAS RAPIDO, CUANDO
      SELECCIONE ALGUNO, DEBAJO DEBE ACTUALIZARSE CON TODOS LOS OBJETOS QUE
      TENGAN UNA DEPENDENCIA DE DICHO OBJETO
    </Card>
  );
};

const SqlDetector = () => {
  return (
    <Card title="">
      <>
        AQUI DEBEN DEBE HABER UN LISTADO DE LOS OBJETOS SQ SOURCE QUALIFIER Y
        TARGETS QUE TENGAN ALGUN VALOR EN SUS ATRIBUTOS PRESQL O POSTSQL
      </>
    </Card>
  );
};

const tabs = [
  {
    id: "validator",
    name: "Validador de Expresiones",
    component: ExpressionValidator,
  },
  {
    id: "searcher",
    name: "Buscador de Dependencias",
    component: DependencySearcher,
  },
  { id: "detector", name: "Detector de SQL", component: SqlDetector },
];

export default function Tools() {
  const [activeTab, setActiveTab] = useState(tabs[0].id);

  const ActiveComponent =
    tabs.find((tab) => tab.id === activeTab)?.component || ExpressionValidator;

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100">
      <div className="max-w-7xl mx-auto p-6 space-y-8">
        {/* Header Section */}
        <div className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md">
          <div className="flex items-center space-x-4 mb-6">
            <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center shadow-lg">
              <svg
                className="w-6 h-6 text-white"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"
                />
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                />
              </svg>
            </div>
            <div>
              <h1 className="text-2xl font-bold text-slate-900">
                Herramientas
              </h1>
              <p className="text-slate-600">
                Herramientas especializadas para an√°lisis y validaci√≥n
              </p>
            </div>
          </div>

          {/* Tabs */}
          <div className="flex space-x-1 bg-gray-100 p-1 rounded-lg">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex-1 py-2 px-4 text-sm font-medium rounded-md transition-all ${
                  activeTab === tab.id
                    ? "bg-white text-blue-600 shadow-sm"
                    : "text-gray-600 hover:text-gray-900"
                }`}
              >
                {tab.name}
              </button>
            ))}
          </div>
        </div>

        {/* Active Tool */}
        <div className="animate-fade-in">
          <ActiveComponent />
        </div>
      </div>
    </div>
  );
}


--------------------------------------------------------------------------------

// src/pages/Mappings.tsx

import { useAppData } from "../components/layout/MainLayout";
import { Card } from "../components/ui/Card";

const Mappings = () => {
  const { data, searchTerm } = useAppData();

  // Usamos optional chaining (?.) para evitar errores si data es null al inicio
  const filteredMappings = data?.mappings?.filter((mapping) =>
    mapping.name?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const totalMappings = data?.mappings?.length || 0;
  const validMappings = data?.mappings?.filter(m => m.isValid === "YES").length || 0;
  const invalidMappings = totalMappings - validMappings;

  return (
    <div className="space-y-8">
      {/* Header Section */}
      <div className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md">
        <div className="flex items-center space-x-4 mb-6">
          <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center shadow-lg">
            <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-1.447-.894L15 4m0 13V4m0 0L9 7" />
            </svg>
          </div>
          <div>
            <h1 className="text-2xl font-bold text-slate-900">Mappings</h1>
            <p className="text-slate-600">Gesti√≥n de transformaciones de datos</p>
          </div>
        </div>

        {/* Statistics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl p-4">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-1.447-.894L15 4m0 13V4m0 0L9 7" />
                </svg>
              </div>
              <div>
                <p className="text-sm text-blue-600 font-medium">Total</p>
                <p className="text-2xl font-bold text-blue-900">{totalMappings}</p>
              </div>
            </div>
          </div>

          <div className="bg-gradient-to-br from-green-50 to-green-100 rounded-xl p-4">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-green-500 rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div>
                <p className="text-sm text-green-600 font-medium">V√°lidos</p>
                <p className="text-2xl font-bold text-green-900">{validMappings}</p>
              </div>
            </div>
          </div>

          <div className="bg-gradient-to-br from-red-50 to-red-100 rounded-xl p-4">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-red-500 rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div>
                <p className="text-sm text-red-600 font-medium">Inv√°lidos</p>
                <p className="text-2xl font-bold text-red-900">{invalidMappings}</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Mappings Grid */}
      <div className="space-y-6">
        {searchTerm && (
          <div className="bg-blue-50 border border-blue-200 rounded-xl p-4">
            <div className="flex items-center space-x-2">
              <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
              <p className="text-blue-800">
                Mostrando resultados para: <span className="font-semibold">"{searchTerm}"</span>
              </p>
              {filteredMappings && (
                <span className="text-blue-600">({filteredMappings.length} encontrados)</span>
              )}
            </div>
          </div>
        )}

        {filteredMappings && filteredMappings.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-6">
            {filteredMappings.map((mapping) => (
              <div
                key={mapping.name}
                className="bg-white rounded-2xl border border-slate-200/60 p-6 shadow-md hover:shadow-lg transition-all duration-200 group"
              >
                <div className="flex items-start justify-between mb-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-lg flex items-center justify-center group-hover:scale-110 transition-transform duration-200">
                      <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-1.447-.894L15 4m0 13V4m0 0L9 7" />
                      </svg>
                    </div>
                    <div>
                      <h3 className="text-lg font-bold text-slate-900 group-hover:text-blue-600 transition-colors duration-200">
                        {mapping.name}
                      </h3>
                      <p className="text-sm text-slate-600">Mapping</p>
                    </div>
                  </div>
                  <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                    mapping.isValid === "YES" 
                      ? "bg-green-100 text-green-800" 
                      : "bg-red-100 text-red-800"
                  }`}>
                    <div className={`w-1.5 h-1.5 rounded-full mr-1 ${
                      mapping.isValid === "YES" ? "bg-green-400" : "bg-red-400"
                    }`}></div>
                    {mapping.isValid === "YES" ? "V√°lido" : "Inv√°lido"}
                  </span>
                </div>

                <div className="space-y-3 mb-4">
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-slate-600">Transformaciones</span>
                    <span className="text-sm font-semibold text-slate-900">
                      {mapping.transformations?.length || 0}
                    </span>
                  </div>
                  
                  {mapping.description && (
                    <div className="p-3 bg-slate-50 rounded-lg">
                      <p className="text-sm text-slate-600 line-clamp-2">{mapping.description}</p>
                    </div>
                  )}
                </div>

                <Card
                  title=""
                  to={`/powercenter/mappings/${mapping.name}`}
                  titleClassName="!p-0 !border-0 !shadow-none !bg-transparent"
                >
                  <div className="w-full bg-gradient-to-r from-blue-500 to-indigo-600 text-white rounded-lg p-3 text-center font-medium hover:from-blue-600 hover:to-indigo-700 transition-all duration-200">
                    Ver Detalles
                  </div>
                </Card>
              </div>
            ))}
          </div>
        ) : (
          <div className="bg-white rounded-2xl border border-slate-200/60 p-12 shadow-md text-center">
            <div className="w-16 h-16 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg className="w-8 h-8 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-1.447-.894L15 4m0 13V4m0 0L9 7" />
              </svg>
            </div>
            <h3 className="text-lg font-semibold text-slate-900 mb-2">
              {searchTerm ? "No se encontraron mappings" : "No hay mappings disponibles"}
            </h3>
            <p className="text-slate-600">
              {searchTerm 
                ? `No se encontraron mappings que coincidan con "${searchTerm}"`
                : "No hay mappings configurados en el sistema"
              }
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default Mappings;


--------------------------------------------------------------------------------

// src/pages/ExpressionValidator.tsx

import { useMemo, useState } from "react";

// Re-typing the pieces we actually use to keep this file standalone
// (you can remove these if you already export them from your types file)
type Field = { name: string; portType?: string };
type Transformation = {
  name: string;
  type: string; // "Expression", "Source Qualifier", etc
  fields?: Field[];
};

type Instance = {
  name: string; // unique instance name in the mapping canvas
  type: "SOURCE" | "TARGET" | "TRANSFORMATION";
  transformationName: string; // the reusable object name behind the instance
  transformationType: string; // e.g. "Source Definition"
};

type Connector = {
  fromField?: string;
  fromInstance: string;
  fromInstanceType: string; // e.g. "Source Definition"
  toField?: string;
  toInstance: string;
  toInstanceType: string; // e.g. "Source Qualifier"
};

export type Mapping = {
  name: string;
  transformations?: Transformation[];
  instances?: Instance[];
  connectors?: Connector[];
};

type Source = {
  name: string; // business name of the source (a.k.a. transformationName)
  fields?: { name: string }[];
};

type Extraction = {
  mappings?: Mapping[];
  sources?: Source[];
};

// You'll already have this via your MainLayout
function useAppData(): { data: Extraction } {
  // @ts-ignore - this gets injected by your existing layout/provider
  return window.__APP_DATA__ || { data: { mappings: [], sources: [] } };
}

// Helpers -------------------------------------------------------------
const isInputLike = (portType?: string) => portType?.includes("INPUT");

function toK(num: number) {
  if (num < 1000) return String(num);
  return (num / 1000).toFixed(1).replace(/\.0$/, "") + "k";
}

// Core analyzers ------------------------------------------------------
function analyzeSourcesToSQ(mapping: Mapping, allSourcesByName: Map<string, Source>) {
  const rows: {
    mapping: string;
    source: string;
    sq: string;
    totalFields: number;
    connectedFields: number;
    missingCount: number;
    missing: string[];
  }[] = [];

  const srcToSq = (mapping.connectors || []).filter(
    (c) => c.fromInstanceType === "Source Definition" && c.toInstanceType === "Source Qualifier"
  );

  const usedByKey = new Map<string, Set<string>>(); // key = `${src}‚Üí${sq}`
  for (const c of srcToSq) {
    const key = `${c.fromInstance}‚Üí${c.toInstance}`;
    if (!usedByKey.has(key)) usedByKey.set(key, new Set());
    if (c.fromField) usedByKey.get(key)!.add(c.fromField);
  }

  // Fold to rows
  for (const [key, used] of usedByKey) {
    const [src, sq] = key.split("‚Üí");
    const srcDef = allSourcesByName.get(src);
    const allFieldNames = new Set((srcDef?.fields || []).map((f) => f.name));
    const missing = [...allFieldNames].filter((f) => !used.has(f)).sort();

    rows.push({
      mapping: mapping.name,
      source: src,
      sq,
      totalFields: allFieldNames.size,
      connectedFields: used.size,
      missingCount: missing.length,
      missing,
    });
  }

  return rows.sort((a, b) => b.missingCount - a.missingCount);
}

function analyzeExpressionInputs(mapping: Mapping) {
  const rows: {
    mapping: string;
    expression: string;
    totalInputs: number;
    unconnectedCount: number;
    unconnected: string[];
  }[] = [];

  const toFieldsByInstance = new Map<string, Set<string>>();
  for (const c of mapping.connectors || []) {
    if (!toFieldsByInstance.has(c.toInstance)) toFieldsByInstance.set(c.toInstance, new Set());
    if (c.toField) toFieldsByInstance.get(c.toInstance)!.add(c.toField);
  }

  for (const t of mapping.transformations || []) {
    if (t.type !== "Expression") continue; // per your rule, only Expressions

    const definedInputs = (t.fields || []).filter((f) => isInputLike(f.portType)).map((f) => f.name);
    const incoming = toFieldsByInstance.get(t.name) || new Set<string>();
    const unconnected = definedInputs.filter((n) => !incoming.has(n)).sort();

    rows.push({
      mapping: mapping.name,
      expression: t.name,
      totalInputs: definedInputs.length,
      unconnectedCount: unconnected.length,
      unconnected,
    });
  }

  return rows.sort((a, b) => b.unconnectedCount - a.unconnectedCount);
}

// UI ------------------------------------------------------------------
export default function ValidatorDeConexiones() {
  const { data } = useAppData();
  const [q, setQ] = useState("");

  const sourcesByName = useMemo(() => new Map((data.sources || []).map((s) => [s.name, s])), [data.sources]);

  const perMapping = useMemo(() => {
    return (data.mappings || []).map((m) => ({
      name: m.name,
      srcToSq: analyzeSourcesToSQ(m, sourcesByName),
      exprInputs: analyzeExpressionInputs(m),
    }));
  }, [data.mappings, sourcesByName]);

  console.log(data);
  

  const filtered = perMapping.filter((m) => m.name.toLowerCase().includes(q.toLowerCase()));

  const totalSrcPairs = perMapping.flatMap((m) => m.srcToSq);
  const totalExpr = perMapping.flatMap((m) => m.exprInputs);

  const totalMissingSrc = totalSrcPairs.reduce((acc, r) => acc + r.missingCount, 0);
  const totalUnconnExpr = totalExpr.reduce((acc, r) => acc + r.unconnectedCount, 0);

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-white border border-slate-200/60 rounded-2xl p-6 shadow-md">
        <div className="flex items-center justify-between gap-4 flex-wrap">
          <div>
            <h2 className="text-2xl font-bold text-slate-900">Validador de conexiones</h2>
            <p className="text-slate-600 mt-1">Detecta puertos <span className="font-semibold">definidos</span> sin conectores.</p>
          </div>
          <div className="flex items-center gap-3">
            <Stat label="Pairs Source‚ÜíSQ" value={totalSrcPairs.length} tooltip="# de (Source, SQ) detectados en todos los mapeos" />
            <Stat label="Puertos Source sin conexioÃÅn" value={toK(totalMissingSrc)} tooltip="Suma de campos de Source sin conectar hacia su SQ" />
            <Stat label="Entradas de Expression sin conector" value={toK(totalUnconnExpr)} tooltip="Suma de entradas no cableadas en transformaciones Expression" />
          </div>
        </div>

        <div className="mt-4">
          <input
            value={q}
            onChange={(e) => setQ(e.target.value)}
            placeholder="Filtrar por nombre de mapping‚Ä¶"
            className="w-full md:w-96 focus-ring rounded-xl border border-slate-300 px-3 py-2 text-sm"
          />
        </div>
      </div>

      {/* Body */}
      {filtered.length === 0 && (
        <div className="text-center text-slate-600 py-16">No se encontraron mappings.</div>
      )}

      <div className="space-y-8">
        {filtered.map((m) => (
          <section key={m.name} className="bg-white border border-slate-200/60 rounded-2xl p-6 shadow-md">
            <header className="flex items-center justify-between gap-3 flex-wrap">
              <h3 className="text-lg font-semibold text-slate-900">{m.name}</h3>
              <div className="flex items-center gap-2 text-sm">
                <Badge intent="warning">{m.srcToSq.reduce((a, r) => a + r.missingCount, 0)} puertos Source‚ÜíSQ sin conectar</Badge>
                <Badge intent="info">{m.exprInputs.reduce((a, r) => a + r.unconnectedCount, 0)} entradas Expression sin conector</Badge>
              </div>
            </header>

            {/* Sources ‚Üí SQ */}
            <div className="mt-6">
              <h4 className="font-medium text-slate-800 mb-3">Sources ‚á¢ SQ (puertos definidos sin conexioÃÅn)</h4>
              {m.srcToSq.length === 0 && (
                <p className="text-slate-500 text-sm">No hay relaciones Source‚ÜíSQ detectadas en este mapping.</p>
              )}

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {m.srcToSq.map((r) => (
                  <details key={`${r.source}‚Üí${r.sq}`} className="rounded-xl border border-amber-200/60 bg-amber-50/60 p-4 group">
                    <summary className="cursor-pointer list-none flex items-start justify-between gap-3">
                      <div>
                        <div className="font-semibold text-amber-900">{r.source} ‚Üí <span className="underline decoration-dotted">{r.sq}</span></div>
                        <div className="text-xs text-amber-800 mt-1">
                          {r.connectedFields}/{r.totalFields} conectados ‚Ä¢ {r.missingCount} sin conexioÃÅn
                        </div>
                      </div>
                      <Badge intent={r.missingCount ? "warning" : "success"}>{r.missingCount} sin conexioÃÅn</Badge>
                    </summary>

                    {r.missingCount > 0 ? (
                      <div className="mt-3">
                        <div className="text-xs text-slate-600 mb-1">Primeros 30:</div>
                        <div className="flex flex-wrap gap-2">
                          {r.missing.slice(0, 30).map((f) => (
                            <span key={f} className="inline-flex items-center gap-1 rounded-full bg-white border border-amber-200 px-2 py-1 text-[11px] text-amber-900">
                              <span className="w-1.5 h-1.5 rounded-full bg-amber-500" /> {f}
                            </span>
                          ))}
                        </div>
                        {r.missingCount > 30 && (
                          <div className="text-[11px] text-slate-500 mt-2">‚Ä¶y {r.missingCount - 30} maÃÅs</div>
                        )}
                      </div>
                    ) : (
                      <div className="mt-3 text-sm text-green-700">Todo conectado üéâ</div>
                    )}
                  </details>
                ))}
              </div>
            </div>

            {/* Expression inputs */}
            <div className="mt-8">
              <h4 className="font-medium text-slate-800 mb-3">Expressions (entradas definidas sin conector)</h4>
              {m.exprInputs.length === 0 && (
                <p className="text-slate-500 text-sm">No hay transformaciones de tipo Expression en este mapping.</p>
              )}

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {m.exprInputs.map((r) => (
                  <details key={r.expression} className="rounded-xl border border-sky-200/60 bg-sky-50/70 p-4 group">
                    <summary className="cursor-pointer list-none flex items-start justify-between gap-3">
                      <div>
                        <div className="font-semibold text-sky-900">{r.expression}</div>
                        <div className="text-xs text-sky-800 mt-1">
                          {r.unconnectedCount}/{r.totalInputs} entradas sin conector
                        </div>
                      </div>
                      <Badge intent={r.unconnectedCount ? "warning" : "success"}>{r.unconnectedCount} sin conector</Badge>
                    </summary>

                    {r.unconnectedCount > 0 ? (
                      <div className="mt-3">
                        <div className="text-xs text-slate-600 mb-1">Primeros 30:</div>
                        <div className="flex flex-wrap gap-2">
                          {r.unconnected.slice(0, 30).map((f) => (
                            <span key={f} className="inline-flex items-center gap-1 rounded-full bg-white border border-sky-200 px-2 py-1 text-[11px] text-sky-900">
                              <span className="w-1.5 h-1.5 rounded-full bg-sky-500" /> {f}
                            </span>
                          ))}
                        </div>
                        {r.unconnectedCount > 30 && (
                          <div className="text-[11px] text-slate-500 mt-2">‚Ä¶y {r.unconnectedCount - 30} maÃÅs</div>
                        )}
                      </div>
                    ) : (
                      <div className="mt-3 text-sm text-green-700">Todas las entradas estaÃÅn cableadas ‚úÖ</div>
                    )}
                  </details>
                ))}
              </div>
            </div>
          </section>
        ))}
      </div>

      {/* Footer hint */}
      <div className="text-[11px] text-slate-500 pb-8">
        Tip: si tienes SQ con SQL personalizado, seguimos tomando los campos "usados" a partir de los conectores (FROMFIELD) que el extractor encontroÃÅ para ese SQL. Los demaÃÅs campos del Source aparecen aquiÃÅ como no conectados.
      </div>
    </div>
  );
}

function Stat({ label, value, tooltip }: { label: string; value: string | number; tooltip?: string }) {
  return (
    <div className="px-3 py-2 rounded-xl bg-slate-50 border border-slate-200 text-sm text-slate-800" title={tooltip}>
      <div className="text-[11px] text-slate-500">{label}</div>
      <div className="font-semibold">{value}</div>
    </div>
  );
}

function Badge({ children, intent = "neutral" as "neutral" | "success" | "warning" | "info" }) {
  const styles: Record<string, string> = {
    neutral: "bg-slate-100 text-slate-700 border-slate-200",
    success: "bg-green-100 text-green-700 border-green-200",
    warning: "bg-amber-100 text-amber-800 border-amber-200",
    info: "bg-sky-100 text-sky-800 border-sky-200",
  };
  return (
    <span className={`inline-flex items-center gap-1 rounded-full border px-2 py-1 text-[11px] ${styles[intent]}`}>
      {children}
    </span>
  );
}


--------------------------------------------------------------------------------

// src/pages/NotFound.tsx

import { Button } from "../components/ui/Button";

const NotFound = () => {
  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 flex items-center justify-center p-6">
      <div className="max-w-md w-full text-center">
        {/* Ilustraci√≥n 404 */}
        <div className="relative mb-8">
          <div className="text-8xl font-bold text-gradient animate-pulse-subtle">
            404
          </div>
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="w-32 h-32 bg-gradient-to-br from-blue-500/20 to-purple-500/20 rounded-full blur-xl animate-pulse"></div>
          </div>
        </div>

        {/* Contenido principal */}
        <div className="space-y-4 mb-8">
          <h1 className="text-3xl font-bold text-slate-900">
            P√°gina no encontrada
          </h1>
          <p className="text-slate-600 text-lg leading-relaxed">
            Lo sentimos, la p√°gina que est√°s buscando no existe o ha sido movida.
          </p>
        </div>

        {/* Ilustraci√≥n decorativa */}
        <div className="mb-8 flex justify-center">
          <div className="relative">
            <svg className="w-48 h-32 text-slate-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <div className="absolute inset-0 flex items-center justify-center">
              <svg className="w-16 h-16 text-blue-500 animate-bounce" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
              </svg>
            </div>
          </div>
        </div>

        {/* Acciones */}
        <div className="space-y-4">
          <Button
            to="/"
            variant="primary"
            size="lg"
            fullWidth
            icon={
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
              </svg>
            }
          >
            Volver al Dashboard
          </Button>
          
          <Button
            onClick={() => window.history.back()}
            variant="ghost"
            size="md"
            fullWidth
            icon={
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
              </svg>
            }
          >
            P√°gina anterior
          </Button>
        </div>

        {/* Enlaces √∫tiles */}
        <div className="mt-12 pt-8 border-t border-slate-200">
          <p className="text-sm text-slate-500 mb-4">Enlaces √∫tiles:</p>
          <div className="flex flex-wrap justify-center gap-4 text-sm">
            <Button to="/mappings" variant="ghost" size="sm">
              Mappings
            </Button>
            <Button to="/workflows" variant="ghost" size="sm">
              Workflows
            </Button>
            <Button to="/sessions" variant="ghost" size="sm">
              Sessions
            </Button>
            <Button to="/sources" variant="ghost" size="sm">
              Sources
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default NotFound;


--------------------------------------------------------------------------------

// src/services/etlService.ts

import type { IFlatExtractionData } from "../interfaces";

export const getEtlData = async (): Promise<IFlatExtractionData> => {
  const response = await fetch("/extraction.json");
  if (!response.ok) {
    throw new Error("Network response was not ok");
  }
  return response.json();
};


--------------------------------------------------------------------------------

// src/interfaces/mapping.interface.ts

// src/interfaces/mapping.interface.ts

/**
 * Atributos clave-valor que definen el comportamiento de diversos elementos.
 * Los atributos se fusionan como propiedades directas.
 */
export interface ITableAttribute {
  NAME: string;
  VALUE: string;
}

/**
 * Representa un mapeo (Mapping) que define el flujo de datos.
 * Los atributos se fusionan como propiedades directas.
 */
export interface IMapping {
  NAME: string;
  ISVALID: "YES" | "NO";
  OBJECTVERSION: string;
  VERSIONNUMBER: string;
  DESCRIPTION?: string;
  TRANSFORMATION?: ITransformation[];
  INSTANCE?: IInstance[];
  CONNECTOR?: IConnector[];
  TARGETLOADORDER?: ITargetLoadOrder[];
  MAPPINGVARIABLE?: IMappingVariable[];
  ERPINFO?: object; // Etiqueta vac√≠a en el XML
}

/**
 * Representa una transformaci√≥n dentro de un mapeo (ej. Expression, Filter).
 * Los atributos se fusionan como propiedades directas.
 */
export interface ITransformation {
  NAME: string;
  TYPE:
    | "Source Qualifier"
    | "Expression"
    | "Filter"
    | "Aggregator"
    | "Joiner"
    | "Lookup Procedure"
    | "Update Strategy"
    | "Sorter"; // A√±adido "Sorter"
  OBJECTVERSION: string;
  REUSABLE: "YES" | "NO";
  VERSIONNUMBER: string;
  DESCRIPTION?: string;
  TRANSFORMFIELD?: ITransformField[];
  TABLEATTRIBUTE?: ITableAttribute[];
  METADATAEXTENSION?: IMetaDataExtension[]; // Extensi√≥n de metadatos (opcional)
}

/**
 * Representa un puerto (campo) dentro de una transformaci√≥n.
 * Los atributos se fusionan como propiedades directas.
 */
export interface ITransformField {
  NAME: string;
  PORTTYPE:
    | "INPUT"
    | "OUTPUT"
    | "INPUT/OUTPUT"
    | "LOOKUP/OUTPUT"
    | "LOOKUP/RETURN/OUTPUT"
    | "INPUT/OUTPUT/MASTER";
  DATATYPE:
    | "nstring"
    | "date/time"
    | "decimal"
    | "string"
    | "integer"
    | "number(p,s)"
    | "varchar2"
    | "number"; // Tipos de datos extendidos
  PRECISION: string;
  SCALE: string;
  DEFAULTVALUE?: string;
  DESCRIPTION?: string;
  EXPRESSION?: string;
  EXPRESSIONTYPE?: "GENERAL" | "GROUPBY";
  PICTURETEXT?: string;
  // Espec√≠ficos para transformaciones Sorter
  ISSORTKEY?: "YES" | "NO";
  SORTDIRECTION?: "ASCENDING" | "DESCENDING";
}

/**
 * Instancia de una transformaci√≥n, fuente o destino dentro de un mapeo.
 * Los atributos se fusionan como propiedades directas.
 */
export interface IInstance {
  NAME: string;
  TYPE: "SOURCE" | "TARGET" | "TRANSFORMATION";
  TRANSFORMATION_NAME: string;
  TRANSFORMATION_TYPE: string;
  DESCRIPTION?: string;
  REUSABLE?: "YES" | "NO";
  DBDNAME?: string; // Presente para instancias de fuentes/destinos
  ASSOCIATED_SOURCE_INSTANCE?: {
    NAME: string;
  };
  TABLEATTRIBUTE?: ITableAttribute[]; // Las instancias tambi√©n pueden tener atributos (ej. "Table Name Prefix" para TARGET)
}

/**
 * Define la conexi√≥n entre los puertos de dos instancias en un mapeo.
 * Los atributos se fusionan como propiedades directas.
 */
export interface IConnector {
  FROMFIELD: string;
  FROMINSTANCE: string;
  FROMINSTANCETYPE: string;
  TOFIELD: string;
  TOINSTANCE: string;
  TOINSTANCETYPE: string;
}

/**
 * Define el orden de carga para los destinos en un mapeo.
 * Los atributos se fusionan como propiedades directas.
 */
export interface ITargetLoadOrder {
  ORDER: string;
  TARGETINSTANCE: string;
}

/**
 * Una variable definida a nivel de mapeo (ej. $$AtributoPF).
 * Los atributos se fusionan como propiedades directas.
 */
export interface IMappingVariable {
  NAME: string;
  DATATYPE: string;
  ISPARAM: "YES" | "NO";
  USERDEFINED: "YES" | "NO";
  PRECISION: string;
  SCALE: string;
  DEFAULTVALUE?: string;
  DESCRIPTION?: string;
  ISEXPRESSIONVARIABLE?: "YES" | "NO";
}

/**
 * Extensi√≥n de metadatos para transformaciones.
 * Los atributos se fusionan como propiedades directas.
 */
export interface IMetaDataExtension {
  DATATYPE: string;
  DOMAINNAME: string;
  ISCLIENTEDITABLE: "YES" | "NO";
  ISCLIENTVISIBLE: "YES" | "NO";
  ISREUSABLE: "YES" | "NO";
  ISSHAREREAD: "YES" | "NO";
  ISSHAREWRITE: "YES" | "NO";
  MAXLENGTH: string;
  NAME: string;
  VALUE: string;
  VENDORNAME: string;
  DESCRIPTION?: string;
}


--------------------------------------------------------------------------------

// src/interfaces/powermart.interface.ts

// src/interfaces/powermart.interface.ts
import type { IMapping, ITableAttribute } from "./mapping.interface";
import type { ISession } from "./sessiones.interface";
import type { IConfig, ITask, IWorkflow } from "./workflow.interface";

/**
 * Representa el nodo ra√≠z del documento XML de PowerCenter.
 * Los atributos se fusionan como propiedades directas debido a `mergeAttrs: true`.
 */
export interface IPowerMart {
  CREATION_DATE: string;
  REPOSITORY_VERSION: string;
  REPOSITORY: IRepository;
}

/**
 * Contiene la informaci√≥n del repositorio y la carpeta principal.
 */
export interface IRepository {
  NAME: string;
  VERSION: string;
  CODEPAGE: string;
  DATABASETYPE: string;
  FOLDER: IFolder; // Asumiendo una sola carpeta principal por repositorio en este XML
}

/**
 * El contenedor principal para todos los objetos de ETL como
 * fuentes, destinos, mapeos, sesiones y workflows.
 */
export interface IFolder {
  NAME: string;
  GROUP?: string; // Presente pero vac√≠o en el ejemplo
  OWNER: string;
  SHARED: "SHARED" | "NOTSHARED";
  DESCRIPTION?: string;
  PERMISSIONS?: string; // Ejemplo: "rwx---r--"
  UUID?: string;
  SOURCE?: ISource[];
  TARGET?: ITarget[];
  MAPPING?: IMapping[];
  SESSION?: ISession[];
  WORKFLOW?: IWorkflow; // Asumiendo un √∫nico workflow por archivo XML en este contexto
  CONFIG?: IConfig[];
  TASK?: ITask[]; // Tareas reutilizables definidas directamente en la carpeta
  ERPINFO?: object; // Etiqueta vac√≠a en el XML de ejemplo
}

/**
 * Interfaz gen√©rica para un campo (columna) en una fuente o destino.
 * Los atributos se fusionan como propiedades directas.
 */
export interface IField {
  NAME: string;
  DATATYPE: string; // Ej. "date", "varchar2", "number(p,s)"
  KEYTYPE: "PRIMARY KEY" | "NOT A KEY" | "PRIMARY FOREIGN KEY" | "FOREIGN KEY";
  NULLABLE: "NULL" | "NOTNULL";
  PRECISION: string; // Ej. "19", "200"
  SCALE: string; // Ej. "0", "9"
  DESCRIPTION?: string;
  BUSINESSNAME?: string;
  FIELDNUMBER: string;
  PICTURETEXT?: string;
  // Atributos espec√≠ficos para SOURCEFIELD (se hacen opcionales para reutilizar en TARGETFIELD)
  FIELDPROPERTY?: string; // Ej. "0"
  FIELDTYPE?: string; // Ej. "ELEMITEM"
  HIDDEN?: "YES" | "NO"; // Ej. "NO"
  LENGTH?: string; // Ej. "19", "0", "10"
  LEVEL?: string; // Ej. "0"
  OCCURS?: string; // Ej. "0"
  OFFSET?: string; // Ej. "0", "19"
  PHYSICALLENGTH?: string; // Ej. "19", "200"
  PHYSICALOFFSET?: string; // Ej. "0", "19"
  USAGE_FLAGS?: string; // Ej. ""
}

/**
 * Representa una definici√≥n de fuente de datos (Source Definition).
 * Los atributos se fusionan como propiedades directas.
 */
export interface ISource {
  NAME: string;
  DATABASETYPE: string;
  DBDNAME: string;
  OWNERNAME: string;
  OBJECTVERSION: string;
  VERSIONNUMBER: string;
  DESCRIPTION?: string;
  BUSINESSNAME?: string; // Presente pero vac√≠o en el ejemplo
  SOURCEFIELD?: IField[];
  FLATFILE?: IFlatFile; // Atributos espec√≠ficos si es un archivo plano
  TABLEATTRIBUTE?: ITableAttribute[]; // Las fuentes tambi√©n pueden tener atributos, ej. `Base Table Name`
}

/**
 * Representa una definici√≥n de destino de datos (Target Definition).
 * Los atributos se fusionan como propiedades directas.
 */
export interface ITarget {
  NAME: string;
  DATABASETYPE: string;
  OBJECTVERSION: string;
  VERSIONNUMBER: string;
  DESCRIPTION?: string;
  BUSINESSNAME?: string; // Presente pero vac√≠o en el ejemplo
  CONSTRAINT?: string; // Presente pero vac√≠o en el ejemplo
  TABLEOPTIONS?: string; // Presente pero vac√≠o en el ejemplo
  TARGETFIELD?: IField[];
  TABLEATTRIBUTE?: ITableAttribute[]; // Los destinos pueden tener atributos como Pre/Post SQL
}

/**
 * Propiedades espec√≠ficas para fuentes de tipo Flat File.
 * Los atributos se fusionan como propiedades directas.
 */
export interface IFlatFile {
  CODEPAGE: string; // Ej. "UTF-8"
  CONSECDELIMITERSASONE: "YES" | "NO"; // Ej. "NO"
  DELIMITED: "YES" | "NO"; // Ej. "YES"
  DELIMITERS: string; // Ej. ","
  ESCAPE_CHARACTER: string; // Ej. ""
  KEEPESCAPECHAR: "YES" | "NO"; // Ej. "NO"
  LINESEQUENTIAL: "YES" | "NO"; // Ej. "NO"
  MULTIDELIMITERSASAND: "YES" | "NO"; // Ej. "YES"
  NULLCHARTYPE: string; // Ej. "ASCII"
  NULL_CHARACTER: string; // Ej. "*"
  PADBYTES: string; // Ej. "1"
  QUOTE_CHARACTER: "SINGLE" | "DOUBLE" | "NONE"; // Ej. "DOUBLE"
  REPEATABLE: "YES" | "NO"; // Ej. "NO"
  ROWDELIMITER: string; // Ej. "10"
  SHIFTSENSITIVEDATA: "YES" | "NO"; // Ej. "NO"
  SKIPROWS: string; // Ej. "1"
  STRIPTRAILINGBLANKS: "YES" | "NO"; // Ej. "NO"
}


--------------------------------------------------------------------------------

// src/interfaces/workflow.interface.ts

// src/interfaces/workflow.interface.ts
import type { ITableAttribute } from "./mapping.interface";

/**
 * Representa el flujo de trabajo (Workflow) que orquesta la ejecuci√≥n de tareas.
 * Los atributos se fusionan como propiedades directas.
 */
export interface IWorkflow {
  NAME: string;
  ISVALID: "YES" | "NO";
  ISENABLED: "YES" | "NO";
  VERSIONNUMBER: string;
  SERVERNAME: string;
  SERVER_DOMAINNAME: string;
  DESCRIPTION?: string;
  REUSABLE_SCHEDULER?: "NO";
  SCHEDULERNAME?: string; // Ejemplo: "Scheduler"
  SUSPEND_ON_ERROR?: "YES" | "NO";
  TASKS_MUST_RUN_ON_SERVER?: "YES" | "NO";
  SCHEDULER: IScheduler;
  TASK?: ITask[]; // Tareas reutilizables definidas directamente en la carpeta
  TASKINSTANCE?: ITaskInstance[];
  WORKFLOWLINK?: IWorkflowLink[];
  WORKFLOWVARIABLE?: IWorkflowVariable[];
  ATTRIBUTE?: ITableAttribute[]; // Atributos a nivel de workflow como el Parameter Filename
}

/**
 * Una tarea reutilizable definida en la carpeta (ej. Email, Command).
 * Los atributos se fusionan como propiedades directas.
 */
export interface ITask {
  NAME: string;
  TYPE: "Email" | "Command" | "Decision" | "Assignment" | "Start";
  REUSABLE: "YES" | "NO";
  VERSIONNUMBER: string;
  DESCRIPTION?: string;
  ATTRIBUTE?: ITableAttribute[];
  VALUEPAIR?: IValuePair[]; // Para tareas de Command, Decision, Assignment
}

/**
 * Representa un par clave-valor, a menudo utilizado en tareas de comando para par√°metros.
 * Los atributos se fusionan como propiedades directas.
 */
export interface IValuePair {
  EXECORDER: string;
  NAME: string;
  REVERSEASSIGNMENT: "YES" | "NO";
  VALUE: string;
}

/**
 * Instancia de una tarea o sesi√≥n dentro del flujo de trabajo.
 * Los atributos se fusionan como propiedades directas.
 */
export interface ITaskInstance {
  NAME: string;
  TASKNAME: string;
  TASKTYPE: "Start" | "Session" | "Command" | "Decision" | "Assignment";
  ISENABLED: "YES" | "NO";
  // Atributos adicionales presentes en TASKINSTANCE en el XML:
  DESCRIPTION?: string;
  REUSABLE?: "YES" | "NO";
  FAIL_PARENT_IF_INSTANCE_DID_NOT_RUN?: "NO";
  FAIL_PARENT_IF_INSTANCE_FAILS?: "NO";
  TREAT_INPUTLINK_AS_AND?: "YES";
  // Espec√≠ficos para tareas Decision
  "Decision Name"?: string; // Nombre del atributo en el XML
  ATTRIBUTE?: ITableAttribute[]; // Las instancias de tareas pueden tener atributos
  // Aunque el ejemplo no las muestra, una instancia de tarea podr√≠a tener SessionExtension
  // si es una sesi√≥n con overrides en l√≠nea. De momento no se a√±ade aqu√≠.
}

/**
 * Define un enlace de ejecuci√≥n entre dos instancias de tareas.
 * Los atributos se fusionan como propiedades directas.
 */
export interface IWorkflowLink {
  FROMTASK: string;
  TOTASK: string;
  CONDITION?: string; // Condici√≥n para el enlace
}

/**
 * Define una variable a nivel de workflow.
 * Los atributos se fusionan como propiedades directas.
 */
export interface IWorkflowVariable {
  NAME: string;
  DATATYPE: string;
  USERDEFINED: "YES" | "NO";
  ISNULL: "YES" | "NO";
  ISPERSISTENT: "YES" | "NO";
  DEFAULTVALUE?: string;
  DESCRIPTION?: string;
}

/**
 * Define la configuraci√≥n de scheduling del workflow.
 * Los atributos se fusionan como propiedades directas.
 */
export interface IScheduler {
  NAME: string;
  REUSABLE: "YES" | "NO";
  VERSIONNUMBER: string;
  DESCRIPTION?: string;
  SCHEDULEINFO: IScheduleInfo;
}

/**
 * Detalles sobre el schedule.
 * Los atributos se fusionan como propiedades directas.
 */
export interface IScheduleInfo {
  SCHEDULETYPE: "ONDEMAND" | "RUNONCE" | "RUNONSERVERINIT" | string;
}

/**
 * Configuraci√≥n por defecto de la sesi√≥n.
 * Los atributos se fusionan como propiedades directas.
 */
export interface IConfig {
  NAME: string;
  ISDEFAULT: "YES" | "NO";
  VERSIONNUMBER: string;
  DESCRIPTION?: string;
  ATTRIBUTE?: ITableAttribute[];
}


--------------------------------------------------------------------------------

// src/interfaces/multi-workflow.interface.ts

// src/interfaces/multi-workflow.interface.ts
// Importa las interfaces base sin el "$" para el mapeo
import type { IPowerMart } from "./powermart.interface";

/**
 * Helper para asegurar que un elemento siempre se trate como un array.
 * √ötil cuando `xml2js` con `explicitArray: false` devuelve un objeto simple
 * en lugar de un array de un objeto si solo hay un elemento.
 * @param item El elemento a normalizar.
 * @returns Un array de elementos (vac√≠o si es undefined/null, o con el elemento/s).
 */
export function ensureArray<T>(item: T | T[] | undefined): T[] {
  if (item === undefined || item === null) {
    return [];
  }
  if (Array.isArray(item)) {
    return item;
  }
  return [item];
}

/**
 * Estructura de datos crudos extra√≠da, coincidiendo con el XML.
 */
export interface IExtractionResult {
  POWERMART: IPowerMart;
}

/**
 * Representa la estructura de datos extra√≠da y aplanada, m√°s f√°cil de consumir por la UI.
 * Evita la anidaci√≥n profunda del XML y normaliza los tipos.
 */
export interface IFlatExtractionData {
  repositoryName: string;
  folderName: string;
  summary: {
    totalWorkflows: number;
    totalSessions: number;
    totalMappings: number;
    totalSources: number;
    totalTargets: number;
    totalTransformations: number;
  };
  mappings: IMappedMapping[];
  workflows: IMappedWorkflow[];
  sources: IMappedSource[];
  targets: IMappedTarget[];
  sessions: IMappedSession[];
  configs: IMappedConfig[];
  reusableTasks: IMappedTask[]; // Tareas definidas directamente bajo FOLDER
  allTasksInstances: IMappedTaskInstance[]; // Todas las instancias de tareas dentro de los workflows
}

/**
 * Estructura simplificada para una fuente mapeada.
 */
export interface IMappedSource {
  name: string;
  databaseType: string;
  ownerName: string;
  description?: string;
  fields: IMappedField[];
  isFlatFile: boolean;
  attributes?: IMappedAttribute[];
}

/**
 * Estructura simplificada para un destino mapeado.
 */
export interface IMappedTarget {
  name: string;
  databaseType: string;
  description?: string;
  fields: IMappedField[];
  attributes?: IMappedAttribute[];
}

/**
 * Estructura simplificada para un campo (columna) mapeado.
 */
export interface IMappedField {
  name: string;
  dataType: string;
  keyType: string;
  nullable: string;
  precision: string;
  scale: string;
  description?: string;
  length?: string;
  physicalLength?: string;
  fieldProperty?: string;
  fieldType?: string;
  hidden?: "YES" | "NO";
  level?: string;
  occurs?: string;
  offset?: string;
  usage_flags?: string;
}

/**
 * Estructura simplificada para un mapeo mapeado.
 */
export interface IMappedMapping {
  name: string;
  isValid: "YES" | "NO";
  description?: string;
  transformations: IMappedTransformation[];
  instances: IMappedInstance[];
  connectors: IMappedConnector[];
  targetLoadOrders: IMappedTargetLoadOrder[];
  variables: IMappedMappingVariable[];
}

/**
 * Estructura simplificada para una transformaci√≥n mapeada.
 */
export interface IMappedTransformation {
  name: string;
  type: string;
  description?: string;
  reusable: "YES" | "NO";
  fields: IMappedTransformField[];
  attributes: IMappedAttribute[];
  metadataExtensions?: IMappedMetadataExtension[];
}

/**
 * Estructura simplificada para un campo de transformaci√≥n mapeado.
 */
export interface IMappedTransformField {
  name: string;
  portType: string;
  dataType: string;
  precision: string;
  scale: string;
  expression?: string;
  expressionType?: string;
  description?: string;
  isSortKey?: "YES" | "NO";
  sortDirection?: "ASCENDING" | "DESCENDING";
  defaultValue?: string;
  pictureText?: string;
}

/**
 * Estructura simplificada para una instancia mapeada.
 */
export interface IMappedInstance {
  name: string;
  type: string;
  transformationName: string;
  transformationType: string;
  description?: string;
  associatedSourceInstanceName?: string;
  attributes?: IMappedAttribute[];
}

/**
 * Estructura simplificada para un conector mapeado.
 */
export interface IMappedConnector {
  fromField: string;
  fromInstance: string;
  fromInstanceType: string;
  toField: string;
  toInstance: string;
  toInstanceType: string;
}

/**
 * Estructura simplificada para un orden de carga de destino mapeado.
 */
export interface IMappedTargetLoadOrder {
  order: string;
  targetInstance: string;
}

/**
 * Estructura simplificada para una variable de mapeo mapeada.
 */
export interface IMappedMappingVariable {
  name: string;
  dataType: string;
  isParam: "YES" | "NO";
  defaultValue?: string;
  precision: string;
  scale: string;
  isExpressionVariable?: "YES" | "NO";
  userDefined: "YES" | "NO";
  description?: string;
}

/**
 * Estructura simplificada para una extensi√≥n de metadatos mapeada.
 */
export interface IMappedMetadataExtension {
  name: string;
  value: string;
  dataType: string;
  description?: string;
  vendorName: string;
  domainName: string;
  isClientEditable: "YES" | "NO";
  isClientVisible: "YES" | "NO";
  isReusable: "YES" | "NO";
  isShareRead: "YES" | "NO";
  isShareWrite: "YES" | "NO";
  maxLength: string;
}

/**
 * Estructura simplificada para un workflow mapeado.
 */
export interface IMappedWorkflow {
  name: string;
  isValid: "YES" | "NO";
  isEnabled: "YES" | "NO";
  description?: string;
  serverName: string;
  tasks: IMappedTaskInstance[]; // Instancias de tareas/sesiones dentro de este workflow
  links: IMappedWorkflowLink[];
  variables: IMappedWorkflowVariable[];
  attributes: IMappedAttribute[];
  scheduler: IMappedScheduler;
}

/**
 * Estructura simplificada para una instancia de tarea mapeada.
 */
export interface IMappedTaskInstance {
  name: string;
  taskName: string;
  taskType: string;
  isEnabled: "YES" | "NO";
  failParentIfFails?: "YES" | "NO";
  failParentIfDidNotRun?: "YES" | "NO";
  treatInputLinkAsAnd?: "YES" | "NO";
  attributes?: IMappedAttribute[];
  // sessionExtensions?: IMappedSessionExtension[]; // Si las extensiones est√°n directamente bajo la instancia de tarea (no en este XML)
  description?: string;
  reusable?: "YES" | "NO";
  decisionName?: string;
}

/**
 * Estructura simplificada para un enlace de workflow mapeado.
 */
export interface IMappedWorkflowLink {
  fromTask: string;
  toTask: string;
  condition?: string;
}

/**
 * Estructura simplificada para una variable de workflow mapeada.
 */
export interface IMappedWorkflowVariable {
  name: string;
  dataType: string;
  userDefined: "YES" | "NO";
  defaultValue?: string;
  isPersistent: "YES" | "NO";
  description?: string;
  isNull: "YES" | "NO";
}

/**
 * Estructura simplificada para un scheduler mapeado.
 */
export interface IMappedScheduler {
  name: string;
  scheduleType: string;
  description?: string;
}

/**
 * Estructura simplificada para una sesi√≥n mapeada.
 */
export interface IMappedSession {
  name: string;
  mappingName: string;
  isValid: "YES" | "NO";
  description?: string;
  transformationInstances: IMappedSessTransformationInst[];
  sessionExtensions: IMappedSessionExtension[];
  attributes: IMappedAttribute[];
  configReferenceName: string;
  sessionComponents?: IMappedSessionComponent[];
  reusable: "YES" | "NO";
  versionNumber: string;
  sortOrder?: string;
}

/**
 * Estructura simplificada para una instancia de transformaci√≥n de sesi√≥n mapeada.
 */
export interface IMappedSessTransformationInst {
  instanceName: string;
  transformationName: string;
  transformationType: string;
  pipeline: string;
  stage: string;
  isRepartitionPoint: "YES" | "NO";
  partitionType: string;
  attributes?: IMappedAttribute[];
  partition?: {
    name: string;
    description?: string;
  }[];
}

/**
 * Estructura simplificada para una extensi√≥n de sesi√≥n mapeada.
 */
export interface IMappedSessionExtension {
  name: string;
  instanceName: string;
  subType: string;
  transformationType: string;
  type: string;
  connectionReference?: IMappedConnectionReference;
  attributes: IMappedAttribute[];
  dsqInstanceName?: string;
  dsqInstanceType?: string;
}

/**
 * Estructura simplificada para una referencia de conexi√≥n mapeada.
 */
export interface IMappedConnectionReference {
  name: string;
  type: string;
  variable: string;
  connectionName?: string;
  connectionNumber?: string;
  connectionSubtype?: string;
}

/**
 * Estructura simplificada para un componente de sesi√≥n mapeado.
 */
export interface IMappedSessionComponent {
  refObjectName: string;
  reusable: "YES" | "NO";
  type: string;
}

/**
 * Estructura simplificada para un atributo mapeado.
 */
export interface IMappedAttribute {
  name: string;
  value: string;
}

/**
 * Estructura simplificada para una configuraci√≥n mapeada.
 */
export interface IMappedConfig {
  name: string;
  isDefault: "YES" | "NO";
  description?: string;
  attributes: IMappedAttribute[];
  versionNumber: string;
}

/**
 * Estructura simplificada para una tarea reutilizable mapeada (definida en la carpeta).
 */
export interface IMappedTask {
  name: string;
  type: string;
  description?: string;
  reusable: "YES" | "NO";
  attributes?: IMappedAttribute[];
  valuePairs?: IMappedValuePair[];
  versionNumber: string;
}

/**
 * Estructura simplificada para un par clave-valor mapeado.
 */
export interface IMappedValuePair {
  name: string;
  value: string;
  execOrder: string;
  reverseAssignment: "YES" | "NO";
}


--------------------------------------------------------------------------------

// src/interfaces/sessiones.interface.ts

// src/interfaces/sessiones.interface.ts
import type { ITableAttribute } from "./mapping.interface";

/**
 * Representa una sesi√≥n, que es la instancia ejecutable de un mapeo.
 * Los atributos se fusionan como propiedades directas.
 */
export interface ISession {
  NAME: string;
  MAPPINGNAME: string;
  ISVALID: "YES" | "NO";
  REUSABLE: "YES" | "NO";
  VERSIONNUMBER: string;
  DESCRIPTION?: string;
  SORTORDER?: string; // Ej. "Binary"
  SESSTRANSFORMATIONINST?: ISessTransformationInst[];
  SESSIONEXTENSION?: ISessionExtension[];
  ATTRIBUTE?: ITableAttribute[];
  CONFIGREFERENCE: IConfigReference;
  SESSIONCOMPONENT?: ISessionComponent[]; // Componentes reutilizables (ej. Email_Failed)
}

/**
 * Instancia de una transformaci√≥n dentro de una sesi√≥n, define propiedades
 * como el particionamiento.
 * Los atributos se fusionan como propiedades directas.
 */
export interface ISessTransformationInst {
  SINSTANCENAME: string;
  TRANSFORMATIONNAME: string;
  TRANSFORMATIONTYPE: string;
  PIPELINE: string;
  STAGE: string;
  ISREPARTITIONPOINT: "YES" | "NO";
  PARTITIONTYPE: "PASS THROUGH" | "HASH AUTO KEYS" | "ROUND ROBIN" | string;
  DESCRIPTION?: string; // En algunos casos, la instancia de transformaci√≥n tiene una descripci√≥n
  // Un <SESSTRANSFORMATIONINST> puede contener <ATTRIBUTE> (para atributos de partici√≥n)
  ATTRIBUTE?: ITableAttribute[];
  // Puede contener tambi√©n una etiqueta <PARTITION> con sus propios atributos.
  PARTITION?: {
    NAME: string;
    DESCRIPTION?: string;
  }[];
}

/**
 * Define configuraciones espec√≠ficas para conexiones de la sesi√≥n
 * (lectores, escritores, lookups).
 * Los atributos se fusionan como propiedades directas.
 */
export interface ISessionExtension {
  NAME: string; // Ej. "Relational Writer", "Relational Reader", "Relational Lookup"
  SINSTANCENAME: string;
  SUBTYPE: string; // Ej. "Relational Writer", "Relational Lookup"
  TRANSFORMATIONTYPE: string; // Ej. "Target Definition", "Source Qualifier", "Lookup Procedure"
  TYPE: "READER" | "WRITER" | "LOOKUPEXTENSION";
  // Atributos espec√≠ficos para extensiones de Source Qualifier
  DSQINSTNAME?: string;
  DSQINSTTYPE?: string;
  CONNECTIONREFERENCE?: IConnectionReference; // Esto es una etiqueta hija
  ATTRIBUTE?: ITableAttribute[]; // Esto es una etiqueta hija
}

/**
 * Referencia a una conexi√≥n de base de datos o de otro tipo.
 * Los atributos se fusionan como propiedades directas.
 */
export interface IConnectionReference {
  CNXREFNAME: string;
  CONNECTIONTYPE: "Relational" | "Application" | string;
  VARIABLE: string;
  CONNECTIONNAME?: string;
  CONNECTIONNUMBER?: string;
  CONNECTIONSUBTYPE?: string;
}

/**
 * Referencia a un objeto de configuraci√≥n.
 * Los atributos se fusionan como propiedades directas.
 */
export interface IConfigReference {
  TYPE: string;
  REFOBJECTNAME: string;
}

/**
 * Referencia a un componente de sesi√≥n reutilizable (ej. una tarea de Email para notificaci√≥n de fallo).
 * Los atributos se fusionan como propiedades directas.
 */
export interface ISessionComponent {
  REFOBJECTNAME: string;
  REUSABLE: "YES" | "NO";
  TYPE: "Failure Email" | string;
}


--------------------------------------------------------------------------------

// src/interfaces/index.ts

export * from "./mapping.interface.ts";
export * from "./multi-workflow.interface.ts";
export * from "./powermart.interface.ts";
export * from "./sessiones.interface.ts";
export * from "./workflow.interface.ts";


--------------------------------------------------------------------------------

// src/router/index.tsx

import { createBrowserRouter } from "react-router-dom";
import { MainLayout } from "../components/layout/MainLayout";

// Eager loading: Importa todos los componentes de p√°gina directamente
import Dashboard from "../pages/Dashboard";
import Details from "../pages/Details";
import Mappings from "../pages/Mappings";
import NotFound from "../pages/NotFound";
import Sessions from "../pages/Sessions";
import Sources from "../pages/Sources";
import Targets from "../pages/Targets";
import Tools from "../pages/Tools";
import Workflows from "../pages/Workflows";

export const router = createBrowserRouter([
  {
    path: "/",
    element: <MainLayout />,
    children: [
      {
        index: true,
        element: <Dashboard />,
      },
      {
        path: "mappings",
        element: <Mappings />,
      },
      {
        path: "workflows",
        element: <Workflows />,
      },
      {
        path: "sessions",
        element: <Sessions />,
      },
      {
        path: "sources",
        element: <Sources />,
      },
      {
        path: "targets",
        element: <Targets />,
      },
      {
        path: "tools",
        element: <Tools />,
      },
      {
        path: "powercenter/:objectType/:objectId",
        element: <Details />,
      },
    ],
  },
  {
    path: "*",
    element: <NotFound />,
  },
]);


--------------------------------------------------------------------------------

